<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>枫叶的小博客</title>
  
  <subtitle>先完成、在完美。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://z201.github.io/"/>
  <updated>2021-09-20T14:19:13.457Z</updated>
  <id>https://z201.github.io/</id>
  
  <author>
    <name>胖枫叶</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Permission-Design</title>
    <link href="https://z201.github.io/2021/09/20/Permission-design/"/>
    <id>https://z201.github.io/2021/09/20/Permission-design/</id>
    <published>2021-09-20T13:38:35.000Z</published>
    <updated>2021-09-20T14:19:13.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>权限管理是一个几乎所有大中型 B 端系统都会涉及的重要组成部分，其目的是对整个系统进行权限控制，避免造成误操作及数据泄露等风险问题。</p></blockquote><h2 id="权限与权限管理"><a href="#权限与权限管理" class="headerlink" title="权限与权限管理"></a>权限与权限管理</h2><h3 id="名词定义"><a href="#名词定义" class="headerlink" title="名词定义"></a>名词定义</h3><blockquote><p>权限相关的基本概念：</p></blockquote><ul><li>权限：用户可操作行为的最小单位。</li><li>用户：每个用户都有唯一标识，并被授予一个或多个角色。</li><li>角色：由不同的权限组合而成，最终分配给具体用户。</li><li>权限管理：控制用户的权限，只能访问授权内容。</li></ul><h3 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h3><ul><li>ACL（Access Control List）：基于用户级别的权限控制。<ul><li>将系统的各种权限直接授予具体的用户。抽象来说，为每个用户维护了单独的权限列表，当需要分配权限、收回权限时，需要修改对应用户的权限信息。</li></ul></li><li>RBAC（Role Base Access Control）：基于角色级别的权限控制。<ul><li>与 ACL 对比，RBAC不用给用户单个分配权限，权限与用户之前通过角色关联。通过给不同的角色分配不同的权限，只需要将用户指向对应的角色就会有对应的权限。分配权限、收回权限只需要通过修改用户的角色即可。</li></ul></li><li>ABAC（Attribute Base Access Control）：基于属性级别的权限控制。<ul><li>不同于常见的将用户通过某种方式直接关联到权限的方式，ABAC 是通过动态计算一个或一组属性来是否满足某种条件来进行权限判断。属性一般分为四类：用户属性（自然人属性，如年龄、性别等），环境属性（物理环境，如时间、地点、气候），操作属性（读、写）和对象属性（操作对象，如资金、某张图片、某个特定的页面，又称资源属性）。</li></ul></li><li>因此理论上能够实现灵活的权限控制、将在权限与用户之前通过一组或多组属性实现关联，几乎能满足所有类型的需求。</li></ul><h3 id="权限管控"><a href="#权限管控" class="headerlink" title="权限管控"></a>权限管控</h3><blockquote><p>抽象来看权限体系可以分为如下两类：功能权限 与 数据权限 两部分。</p></blockquote><ul><li>功能权限指的是在系统中的功能可否使用，通常我们将功能权限分为查看、编辑、删除等，同时编辑、删除权限又包含了查看。通过小的权限点拆分更精细的赋予了员工能否进入某个页面查看信息、编辑信息的能力。</li><li>数据权限指数据中存在的数据是否能查看，是一个更细粒度的权限。比如一个页面，不同角色查看不同的数据就需要通过数据权限控制。<br>从管理对象维度又可以分为：企业能力 与 员工能力。</li><li>企业能力店铺维度的权限，比如开通某服务，可以通过企业能力去体现。</li><li>企业能力赋予用户的权限，比如收电子发票、资金管理等。</li><li>企业能力优先级绝对高于员工能力，所有场景的权限判断，店铺能力必须先于员工能力。简单地说，企业能力决定了“企业能做什么”，员工能力决定了“用户能做什么”。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;权限管理是一个几乎所有大中型 B 端系统都会涉及的重要组成部分，其目的是对整个系统进行权限控制，避免造成误操作及数
      
    
    </summary>
    
    
      <category term="系统设计" scheme="https://z201.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="系统设计" scheme="https://z201.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="权限设计" scheme="https://z201.github.io/tags/%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Git-Develop-Branch</title>
    <link href="https://z201.github.io/2021/09/20/Git-Develop-Branch/"/>
    <id>https://z201.github.io/2021/09/20/Git-Develop-Branch/</id>
    <published>2021-09-20T13:34:52.000Z</published>
    <updated>2021-09-22T15:40:44.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="规范代码开发流程"><a href="#规范代码开发流程" class="headerlink" title="规范代码开发流程"></a>规范代码开发流程</h2><blockquote><p>git 分支分为集成分支、功能分支和修复分支，分别命名为 develop、feature 和 hotfix，均为单数。不可使用 features、future、hotfixes、hotfixs 等错误名称。</p></blockquote><p>1.git主分支(master)。它是自动建立，用于发布重大版本更新（github 现在默认是是main 因种族歧视问题）<br>2.git开发主分支(develop)。日常开发在此分支上进行<br>3.git临时性分支：用于应对一些特定目的的版本开发(验证OK后，应该删除此分支)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 功能（feature）分支：它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。可以采用feature-的形式命名。</span><br><span class="line">- 预发布（release）分支：指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面分出来的，预发布结束以后，</span><br><span class="line">必须合并进Develop和Master分支。它的命名，可以采用release-的形式。</span><br><span class="line">- 修补bug（hotfix）分支：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master或Develop分支上面分出来的。修补结束以后，</span><br><span class="line">再合并进Master和Develop分支。它的命名，可以采用hotfix-***的形式。</span><br></pre></td></tr></table></figure><p>开发流程</p><blockquote><p>暂定临时分支feature、hotfix两种启用。暂不启用RP、code review。</p></blockquote><p>1.基于develop生成新临时开发分支。<br>2.测试、正式环境上线通过。<br>3.合并至develop分支，并生成对应的tag版本。<br>4.完成特定功能开发后(验证OK后，应该删除此分支)。<br>5.README.md文档中记录tag版本生成时间以及具体的功能名称。</p><p>修复bug流程</p><blockquote><p>根据最新已经上线的分支代码创建hotfix分支。</p></blockquote><p>1.基于develop或者上个tag版本(根据实际情况而定)生成新临时开发分支。<br>2.测试、正式环境上线通过。<br>3.合并至develop分支，并生成对应的tag版本。<br>4.<code>若存在临时开发分支</code>-完成特定功能开发后(验证OK后，应该删除此分支)。<br>5.<code>若存在临时开发分支</code>-临时开发分支合并已经修复bug的develop代码。<br>6.<code>若存在临时开发分支</code>-临时开发分支完成特定功能开发后(验证OK后，应该删除此分支)。<br>7.README.md文档中记录tag版本生成时间以及具体的功能名称。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="开发尺码"><a href="#开发尺码" class="headerlink" title="开发尺码"></a>开发尺码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop &#x2F;&#x2F; 切换开发分支，git pull origin develop 并同步最新的develop分支代码。（强制）</span><br><span class="line">git checkout -b feature-sizeGroup &#x2F;&#x2F;基于develop分支创建新的开发分支（强制）</span><br><span class="line">git checkout develop &#x2F;&#x2F; feature-sizeGroup完成上线后develop分支准备合并分支（强制）</span><br><span class="line">git merge feature-sizeGroup &#x2F;&#x2F; 合并开发功能分支（强制）</span><br><span class="line">git tag -a v1.4 -m &quot;my version 1.4&quot; &#x2F;&#x2F; 合并完成创建标签备注中简单说明开发功能（强制）</span><br><span class="line">git push origin v1.4 &#x2F;&#x2F; 推送tag标签到远程仓库（强制）</span><br><span class="line">git branch -d feature-sizeGroup &#x2F;&#x2F;删除本地的临时开发分支(非强制)</span><br><span class="line">git push origin --delete feature-sizeGroup &#x2F;&#x2F; 删除远程的临时开发分支（强制）</span><br><span class="line">vim README.md &#x2F;&#x2F; 保存新增tag版本记录（强制）</span><br><span class="line">git add README.md &#x2F;&#x2F; 追踪README.md文件。（强制）</span><br><span class="line">git commit -m &quot;发布新的tag&quot; &#x2F;&#x2F; 将暂存区里的改动给提交到本地的版本库（强制）</span><br><span class="line">git push origin develop &#x2F;&#x2F; 推送改动后的develop（强制）</span><br></pre></td></tr></table></figure><h3 id="master-合并周期"><a href="#master-合并周期" class="headerlink" title="master 合并周期"></a>master 合并周期</h3><blockquote><p>每月月底最后几个工作日完成对master 对develop分支的合并。</p></blockquote><h3 id="tag-版本命名"><a href="#tag-版本命名" class="headerlink" title="tag 版本命名"></a>tag 版本命名</h3><blockquote><p>版本命名规范</p></blockquote><ul><li>版本: v1.1.1 ( Build 101001 )</li><li>版本格式 bigVersion.middleVersion.smallVersion</li><li>bigVersion 大版本(年度或者重大更新（强制更新，老版本存在不兼容等情况）) 取值范围 1-99</li><li>middleVersion 迭代版本 取值范围 1-99</li><li>smallVersion bug修复增强发布。 取值范围 1-999</li><li>Build为版本纯数字格式化。</li></ul><h3 id="git帮助文档"><a href="#git帮助文档" class="headerlink" title="git帮助文档"></a>git帮助文档</h3><p><a href="https://gitee.com/all-about-git" target="_blank" rel="noopener">git 大全</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;规范代码开发流程&quot;&gt;&lt;a href=&quot;#规范代码开发流程&quot; class=&quot;headerlink&quot; title=&quot;规范代码开发流程&quot;&gt;&lt;/a&gt;规范代码开发流程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;git 分支分为集成分支、功能分支和修复分支，分别命名为 deve
      
    
    </summary>
    
    
      <category term="Git" scheme="https://z201.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://z201.github.io/tags/Git/"/>
    
      <category term="Develop" scheme="https://z201.github.io/tags/Develop/"/>
    
      <category term="Branch" scheme="https://z201.github.io/tags/Branch/"/>
    
  </entry>
  
  <entry>
    <title>Jvm-optimization</title>
    <link href="https://z201.github.io/2021/08/19/Jvm-optimization/"/>
    <id>https://z201.github.io/2021/08/19/Jvm-optimization/</id>
    <published>2021-08-19T06:09:45.000Z</published>
    <updated>2021-09-22T16:04:16.372Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>jvm调优是日常工作中经常会使用的技巧，整理下。</p></blockquote><h3 id="项目启动的时候加上的参数都是些啥意思？"><a href="#项目启动的时候加上的参数都是些啥意思？" class="headerlink" title="项目启动的时候加上的参数都是些啥意思？"></a>项目启动的时候加上的参数都是些啥意思？</h3><blockquote><p>刚开始工作的时候发现同事会在jar启动的命令上增加很多参数,很长一段时间都不清楚是干啥的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:MetaspaceSize=<span class="number">128</span>m -XX:MaxMetaspaceSize=<span class="number">128</span>m -Xms1024m -Xmx1024m -Xmn256m -Xss256k -XX:SurvivorRatio=<span class="number">8</span> -XX:+UseConcMarkSweepGC</span><br></pre></td></tr></table></figure><ul><li>简单介绍下参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-XX:MetaspaceSize=<span class="number">128</span>m （元空间默认大小）</span><br><span class="line">-XX:MaxMetaspaceSize=<span class="number">128</span>m （元空间最大大小）</span><br><span class="line">-Xms1024m （堆最大大小）</span><br><span class="line">-Xmx1024m （堆默认大小）</span><br><span class="line">-Xmn256m （新生代大小）</span><br><span class="line">-Xss256k （棧最大深度大小）</span><br><span class="line">-XX:SurvivorRatio=<span class="number">8</span> （新生代分区比例 <span class="number">8</span>:<span class="number">2</span>）</span><br><span class="line">-XX:+UseConcMarkSweepGC （指定使用的垃圾收集器，这里使用CMS收集器）</span><br><span class="line">-XX:+PrintGCDetails （打印详细的GC日志）</span><br></pre></td></tr></table></figure><ul><li>虽然有了介绍但是依然不清楚具体是干啥的。并且Java虚拟机提供了非常多的参数命令。下面代码可以输出支持的参数数量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintFlagsFinal -XX:+UnlockDiagnosticVMOptions -version | wc -l</span><br><span class="line">openjdk version <span class="string">"1.8.0_275"</span></span><br><span class="line"><span class="function">OpenJDK Runtime <span class="title">Environment</span> <span class="params">(AdoptOpenJDK)</span><span class="params">(build <span class="number">1.8</span><span class="number">.0</span>_275-b01)</span></span></span><br><span class="line"><span class="function">OpenJDK 64-Bit Server <span class="title">VM</span> <span class="params">(AdoptOpenJDK)</span><span class="params">(build <span class="number">25.275</span>-b01, mixed mode)</span></span></span><br><span class="line"><span class="function">     838</span></span><br></pre></td></tr></table></figure><h3 id="如何理解这些参数的含义？"><a href="#如何理解这些参数的含义？" class="headerlink" title="如何理解这些参数的含义？"></a>如何理解这些参数的含义？</h3><blockquote><p>首先我们需要理解java是如何运行的，为什么需要java虚拟机？    </p><p>我们常用方式一般是安装java运行环境(jre)用命令行的方式启动或者直接双击jar运行。jre包含的java运行的必要环境。</p><p>Java 作为一门高级程序语言，它的语法非常复杂，抽象程度也很高。编译出来的也不是机器可以直接直接运行代码。所以使用面向Java语言的虚拟机运行Java编译以后的特定代码。这里的特定代码指的是Java字节指令码。</p></blockquote><h3 id="JVM-内存分配性能问题"><a href="#JVM-内存分配性能问题" class="headerlink" title="JVM 内存分配性能问题"></a>JVM 内存分配性能问题</h3><ul><li>在应用服务的特定场景下，JVM 内存分配不合理带来的性能表现并不会像内存溢出问题这么突出。如果没有深入到各项性能指标中去，是很难发现其中隐藏的性能损耗。</li><li>JVM 内存分配不合理最直接的表现就是频繁的 GC，这会导致上下文切换等性能问题，从而降低系统的吞吐量、增加系统的响应时间。</li></ul><h3 id="分析-GC-日志"><a href="#分析-GC-日志" class="headerlink" title="分析 GC 日志"></a>分析 GC 日志</h3><ul><li>在进行压测的时候，我们需要对GC日志进行分析。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintGCTimeStamps -XX:+PrintGCDetails -Xloggc:/log/heap.log</span><br></pre></td></tr></table></figure><ul><li>-XX:PrintGCTimeStamps：打印 GC 具体时间；</li><li>-XX:PrintGCDetails ：打印出 GC 详细日志；</li><li>-Xloggc: path：GC 日志生成路径。</li><li>JVM 内存调优通常和 GC 调优是互补的，基于以上调优，可以对年轻代和堆内存的垃圾回收算法进行调优。</li></ul><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;jvm调优是日常工作中经常会使用的技巧，整理下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;项目启动的时候加上的参数都是些啥意思？&quot;&gt;&lt;a href=&quot;#项目启动的时候加上的参数都是些啥意思？&quot; class=&quot;headerlink&quot; title=&quot;项目启动的时候加上的参数都是些啥意思？&quot;&gt;&lt;/a&gt;项目启动的时候加上的参数都是些啥意思？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;刚开始工作的时候发现同事会在jar启动的命令上增加很多参数,很长一段时间都不清楚是干啥的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-XX:MetaspaceSize=&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;m -XX:MaxMetaspaceSize=&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;m -Xms1024m -Xmx1024m -Xmn256m -Xss256k -XX:SurvivorRatio=&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; -XX:+UseConcMarkSweepGC&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;简单介绍下参数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-XX:MetaspaceSize=&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;m （元空间默认大小）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-XX:MaxMetaspaceSize=&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;m （元空间最大大小）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-Xms1024m （堆最大大小）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-Xmx1024m （堆默认大小）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-Xmn256m （新生代大小）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-Xss256k （棧最大深度大小）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-XX:SurvivorRatio=&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; （新生代分区比例 &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-XX:+UseConcMarkSweepGC （指定使用的垃圾收集器，这里使用CMS收集器）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-XX:+PrintGCDetails （打印详细的GC日志）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;虽然有了介绍但是依然不清楚具体是干啥的。并且Java虚拟机提供了非常多的参数命令。下面代码可以输出支持的参数数量&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java -XX:+PrintFlagsFinal -XX:+UnlockDiagnosticVMOptions -version | wc -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openjdk version &lt;span class=&quot;string&quot;&gt;&quot;1.8.0_275&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;OpenJDK Runtime &lt;span class=&quot;title&quot;&gt;Environment&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(AdoptOpenJDK)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(build &lt;span class=&quot;number&quot;&gt;1.8&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;_275-b01)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;OpenJDK 64-Bit Server &lt;span class=&quot;title&quot;&gt;VM&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(AdoptOpenJDK)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(build &lt;span class=&quot;number&quot;&gt;25.275&lt;/span&gt;-b01, mixed mode)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;     838&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;如何理解这些参数的含义？&quot;&gt;&lt;a href=&quot;#如何理解这些参数的含义？&quot; class=&quot;headerlink&quot; title=&quot;如何理解这些参数的含义？&quot;&gt;&lt;/a&gt;如何理解这些参数的含义？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;首先我们需要理解java是如何运行的，为什么需要java虚拟机？    &lt;/p&gt;
&lt;p&gt;我们常用方式一般是安装java运行环境(jre)用命令行的方式启动或者直接双击jar运行。jre包含的java运行的必要环境。&lt;/p&gt;
&lt;p&gt;Java 作为一门高级程序语言，它的语法非常复杂，抽象程度也很高。编译出来的也不是机器可以直接直接运行代码。所以使用面向Java语言的虚拟机运行Java编译以后的特定代码。这里的特定代码指的是Java字节指令码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;JVM-内存分配性能问题&quot;&gt;&lt;a href=&quot;#JVM-内存分配性能问题&quot; class=&quot;headerlink&quot; title=&quot;JVM 内存分配性能问题&quot;&gt;&lt;/a&gt;JVM 内存分配性能问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在应用服务的特定场景下，JVM 内存分配不合理带来的性能表现并不会像内存溢出问题这么突出。如果没有深入到各项性能指标中去，是很难发现其中隐藏的性能损耗。&lt;/li&gt;
&lt;li&gt;JVM 内存分配不合理最直接的表现就是频繁的 GC，这会导致上下文切换等性能问题，从而降低系统的吞吐量、增加系统的响应时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;分析-GC-日志&quot;&gt;&lt;a href=&quot;#分析-GC-日志&quot; class=&quot;headerlink&quot; title=&quot;分析 GC 日志&quot;&gt;&lt;/a&gt;分析 GC 日志&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在进行压测的时候，我们需要对GC日志进行分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-XX:+PrintGCTimeStamps -XX:+PrintGCDetails -Xloggc:/log/heap.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;-XX:PrintGCTimeStamps：打印 GC 具体时间；&lt;/li&gt;
&lt;li&gt;-XX:PrintGCDetails ：打印出 GC 详细日志；&lt;/li&gt;
&lt;li&gt;-Xloggc: path：GC 日志生成路径。&lt;/li&gt;
&lt;li&gt;JVM 内存调优通常和 GC 调优是互补的，基于以上调优，可以对年轻代和堆内存的垃圾回收算法进行调优。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Jvm" scheme="https://z201.github.io/categories/Jvm/"/>
    
    
      <category term="Jvm" scheme="https://z201.github.io/tags/Jvm/"/>
    
  </entry>
  
  <entry>
    <title>Nginx-log-format</title>
    <link href="https://z201.github.io/2021/08/18/Nginx-log-format/"/>
    <id>https://z201.github.io/2021/08/18/Nginx-log-format/</id>
    <published>2021-08-18T10:11:55.000Z</published>
    <updated>2021-08-19T06:07:24.818Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Ngxin 日志格式化</p></blockquote><ul><li>Nginx提供的访问日志里就蕴藏着大量有用信息。今天这篇要说的就是如果修改Nginx默认日志格式，以便于我们更好的挖掘有效指标。</li></ul><p>编辑<code>/etc/nginx.conf</code>配置文件，在日志部分添加下面两段代码，编辑完成后重启Nginx服务即可。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">log_format</span> main <span class="string">'<span class="variable">$host</span> - <span class="variable">$remote_addr</span> - [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                <span class="string">'<span class="variable">$status</span> <span class="variable">$upstream_response_time</span> <span class="variable">$request_time</span> "<span class="variable">$http_referer</span>"'</span></span><br><span class="line">                <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>" <span class="variable">$body_bytes_sent</span> '</span>;</span><br><span class="line"><span class="attribute">access_log</span> /var/log/nginx/access.log main;</span><br></pre></td></tr></table></figure><blockquote><p>简单罗列一下变量的含义:</p></blockquote><ul><li><code>$host</code> 访问域名</li><li><code>$remote_addr</code> 客户端IP地址</li><li><code>$time_local</code> 访问时间</li><li><code>$status</code> 访问状态码</li><li><code>$upstream_response_time</code> 应用返回到Nginx的时间</li><li><code>$request_time</code> 请求时间</li><li><code>$http_referer</code> 请求来源</li><li><code>$http_user_agent</code> 访问客户端</li><li><code>$http_x_forwarded_for</code> 客户端IP地址</li><li><code>$body_bytes_sent</code> 返回给客户端大小</li></ul><blockquote><p>在server中不生效的问题</p></blockquote><ul><li>在server中增加 <code>access_log /var/log/nginx/access.log main;</code></li></ul><blockquote><p>日期显示问题</p></blockquote><ul><li><p><code>[01/Jul/2020:03:25:17 +0800]  </code>官方默认是这种</p></li><li><p>修改默认格式</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">log_format</span> main <span class="string">'<span class="variable">$host</span> - <span class="variable">$remote_addr</span> - [<span class="variable">$time_iso8601</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                <span class="string">'<span class="variable">$status</span> <span class="variable">$upstream_response_time</span> <span class="variable">$request_time</span> "<span class="variable">$http_referer</span>"'</span></span><br><span class="line">                <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>" <span class="variable">$body_bytes_sent</span> '</span>;</span><br><span class="line"><span class="attribute">access_log</span> /var/log/nginx/access.log main;</span><br></pre></td></tr></table></figure><ul><li>在server中增加下面代码</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">if ($time_iso8601 ~ "^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;) (\d&#123;2&#125;):(\d&#123;2&#125;):(\d&#123;2&#125;)") &#123;</span><br><span class="line"><span class="attribute">set</span> <span class="variable">$year</span> <span class="variable">$1</span>;</span><br><span class="line"><span class="attribute">set</span> <span class="variable">$month</span> <span class="variable">$2</span>;</span><br><span class="line"><span class="attribute">set</span> <span class="variable">$day</span> <span class="variable">$3</span>;</span><br><span class="line"><span class="attribute">set</span> <span class="variable">$hour</span> <span class="variable">$4</span>;</span><br><span class="line"><span class="attribute">set</span> <span class="variable">$minutes</span> <span class="variable">$5</span>;</span><br><span class="line"><span class="attribute">set</span> <span class="variable">$seconds</span> <span class="variable">$6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Ngxin 日志格式化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Nginx提供的访问日志里就蕴藏着大量有用信息。今天这篇要说的就是如果修改Nginx默认日志格式，以便于我们更好的挖掘有效指标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编辑&lt;cod
      
    
    </summary>
    
    
      <category term="Nginx" scheme="https://z201.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://z201.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Centos7_jenkins部署</title>
    <link href="https://z201.github.io/2021/05/25/Centos7-jenkins%E9%83%A8%E7%BD%B2/"/>
    <id>https://z201.github.io/2021/05/25/Centos7-jenkins%E9%83%A8%E7%BD%B2/</id>
    <published>2021-05-25T13:20:35.000Z</published>
    <updated>2021-09-21T07:04:54.547Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录最近在Centos7上面部署jenkens。安装的方法有很多，下面采用最简单的方式安装。</p></blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>在线文档 <a href="https://jenkins.io/doc/" target="_blank" rel="noopener">https://jenkins.io/doc/</a></li><li>名词解释：<ul><li>CI</li></ul></li></ul><blockquote><p>jenkins 是一个协调者的身份，管理和协调了代码库，代码仓库，代码运行环境等。</p></blockquote><h2 id="jenkins-简介"><a href="#jenkins-简介" class="headerlink" title="jenkins 简介"></a>jenkins 简介</h2><blockquote><p>Jenkins是一个开源软件项目，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。持续集成（CI）已成为当前许多软件开发团队在整个软件开发生命周期内侧重于保证代码质量的常见做法。它是一种实践，旨在缓和和稳固软件的构建过程。并且能够帮助您的开发团队应对如下挑战：</p></blockquote><ul><li>持续、自动地构建/测试软件项目。</li><li>监控一些定时执行的任务。</li><li>高度可扩展性、全球大量团队使用，并共享代码。</li><li>基于插件、可以做出非常多有趣的事情。</li></ul><p><img src="https://z201.oss-cn-shanghai.aliyuncs.com/JavaNote/jenkins/2.jpg"> </p><h2 id="安裝部署"><a href="#安裝部署" class="headerlink" title="安裝部署"></a>安裝部署</h2><a id="more"></a><blockquote><p>单实例部署</p></blockquote><h3 id="检查当前系统环境"><a href="#检查当前系统环境" class="headerlink" title="检查当前系统环境"></a>检查当前系统环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]<span class="comment"># cat /etc/os-release </span></span><br><span class="line">NAME=<span class="string">"CentOS Linux"</span></span><br><span class="line">VERSION=<span class="string">"7 (Core)"</span></span><br><span class="line">ID=<span class="string">"centos"</span></span><br><span class="line">ID_LIKE=<span class="string">"rhel fedora"</span></span><br><span class="line">VERSION_ID=<span class="string">"7"</span></span><br><span class="line">PRETTY_NAME=<span class="string">"CentOS Linux 7 (Core)"</span></span><br><span class="line">ANSI_COLOR=<span class="string">"0;31"</span></span><br><span class="line">CPE_NAME=<span class="string">"cpe:/o:centos:centos:7"</span></span><br><span class="line">HOME_URL=<span class="string">"https://www.centos.org/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://bugs.centos.org/"</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">"CentOS-7"</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">"7"</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">"centos"</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">"7"</span></span><br></pre></td></tr></table></figure><h3 id="添加源以及公钥"><a href="#添加源以及公钥" class="headerlink" title="添加源以及公钥"></a>添加源以及公钥</h3><h4 id="更新安装jenkens源"><a href="#更新安装jenkens源" class="headerlink" title="更新安装jenkens源"></a>更新安装jenkens源</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum 源导入</span></span><br><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入密钥</span></span><br><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">sudo yum install jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动下载安装包安装</span></span><br><span class="line">https://pkg.jenkins.io/redhat-stable/ <span class="comment"># 这里面找</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查安装</span></span><br><span class="line">whereis jenkins</span><br><span class="line">&gt; jenkins: /usr/lib/jenkins</span><br><span class="line"><span class="comment"># 提示以上内容说明安装成功</span></span><br></pre></td></tr></table></figure><h3 id="修改jenkens配置信息"><a href="#修改jenkens配置信息" class="headerlink" title="修改jenkens配置信息"></a>修改jenkens配置信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑jenkins配置文件</span></span><br><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line"><span class="comment"># 这里主要编辑两个参数 JENKINS_USER JENKINS_JAVA_OPTIONS</span></span><br><span class="line"><span class="comment"># JENKINS_USER jenkens权限用户</span></span><br><span class="line"><span class="comment"># JENKINS_JAVA_OPTIONS jenkens启动参数，这里主要设置启动内存。</span></span><br><span class="line">JENKINS_USER=<span class="string">"root"</span></span><br><span class="line">JENKINS_JAVA_OPTIONS=<span class="string">"-server -Xms512m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=512m  -Djava.awt.headless=true"</span></span><br><span class="line"><span class="comment"># 修改目录权限 如果你不是使用root账号,我偷下懒。</span></span><br><span class="line">chown -R root:root /var/lib/jenkins</span><br><span class="line">chown -R root:root /var/cache/jenkins</span><br><span class="line">chown -R root:root /var/<span class="built_in">log</span>/jenkins</span><br></pre></td></tr></table></figure><h3 id="启动junkets检查"><a href="#启动junkets检查" class="headerlink" title="启动junkets检查"></a>启动junkets检查</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重载所有修改过的配置文件</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Jenkins服务</span></span><br><span class="line">sudo systemctl start jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment">#由于Jenkins不是Native Service，所以需要用chkconfig命令而不是systemctl命令</span></span><br><span class="line">sudo /sbin/chkconfig jenkins on</span><br></pre></td></tr></table></figure><h3 id="第一次启动配置"><a href="#第一次启动配置" class="headerlink" title="第一次启动配置"></a>第一次启动配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看密码</span></span><br><span class="line">cat /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><h3 id="配置jenkens-jdk-maven环境"><a href="#配置jenkens-jdk-maven环境" class="headerlink" title="配置jenkens jdk maven环境"></a>配置jenkens jdk maven环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在系统环境中增加</span></span><br><span class="line"><span class="comment"># JAVA_HOME</span></span><br><span class="line"><span class="comment"># MAVEN_HOME </span></span><br><span class="line"><span class="comment"># 如果jdk是通过yum 安装需要通过ll找到jvm的安装地址</span></span><br><span class="line"><span class="comment"># ll /usr/bin/javac -&gt; /etc/alternatives/javac</span></span><br><span class="line"><span class="comment"># ll /etc/alternatives/javac -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el7_9.x86_64/bin/javac</span></span><br><span class="line"><span class="comment">#举例子</span></span><br><span class="line">JAVA_HOME</span><br><span class="line">/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el7_9.x86_64</span><br><span class="line">MAVEN_HOME</span><br><span class="line">/opt/libhome/apache-maven-3.8.1</span><br><span class="line">PATH</span><br><span class="line"><span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$MAVEN_HOME</span>/bin</span><br></pre></td></tr></table></figure><h2 id="配置企业微信通知"><a href="#配置企业微信通知" class="headerlink" title="配置企业微信通知"></a>配置企业微信通知</h2><blockquote><p>安装插件 <a href="https://plugins.jenkins.io/qy-wechat-notification" target="_blank" rel="noopener">Qy Wechat Notification Plugin</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果无法发送通知提示javax.net.ssl.SSLHandshakeException: No appropriate protocol (protocol is disabled or cipher suites are inappropriate</span><br><span class="line">需要修改$JRE&#x2F;lib&#x2F;security&#x2F;java.security</span><br></pre></td></tr></table></figure><ul><li>去掉两个配置信息 <code>TLSv1 TLSv1.1</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jdk.tls.disabledAlgorithms&#x3D;SSLv3, TLSv1, RC4, DES, MD5withRSA, DH keySize &lt; 1024, \</span><br><span class="line">EC keySize &lt; 224, 3DES_EDE_CBC, anon, NULL</span><br></pre></td></tr></table></figure><h4 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h4><blockquote><p>不要选择社区推荐插件安装</p></blockquote><ul><li><p>因为 <code>Jenkins</code> 插件服务器在国外，所以速度不太理想。我们需要更换为清华大学的 <code>Jenkins</code> 插件源后，再安装插件，<strong>所以先不要点安装插件。</strong></p></li><li><p>更换方法很简单。进入服务器，将 <code>/var/lib/jenkins/updates/default.json</code> 内的插件源地址替换成清华大学的源地址，将 google 替换为 baidu 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g' /var/lib/jenkins/updates/default.json &amp;&amp; sed -i 's/http:\/\/www.google.com/https:\/\/www.baidu.com/g' /var/lib/jenkins/updates/default.json</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改运行端口"><a href="#修改运行端口" class="headerlink" title="修改运行端口"></a>修改运行端口</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line"></span><br><span class="line">JENKINS_PORT=<span class="string">"8080"</span> //改成 JENKINS_PORT=<span class="string">"8088"</span></span><br></pre></td></tr></table></figure><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><ul><li>启动、重启、关闭</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]<span class="comment">#  service jenkins start</span></span><br><span class="line">[root@localhost jenkins]<span class="comment">#  service jenkins restart</span></span><br><span class="line">[root@localhost jenkins]<span class="comment">#  service jenkins shutdown</span></span><br></pre></td></tr></table></figure><ul><li>错误提示</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Starting jenkins (via systemctl):  Warning: jenkins.service changed on disk. Run <span class="string">'systemctl daemon-reload'</span> to reload units.</span><br></pre></td></tr></table></figure><ul><li>若出现上述问题，执行。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]<span class="comment"># systemctl daemon-reload</span></span><br></pre></td></tr></table></figure><ul><li>启动jenkins</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]<span class="comment"># sudo service jenkins start</span></span><br></pre></td></tr></table></figure><ul><li>进入jenkins 网站；一般是8080端口。界面会让你输入密码进入。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# cat &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;secrets&#x2F;initialAdminPassword</span><br></pre></td></tr></table></figure><ul><li>安装插件,如果出现下列错误。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">An error occurred during installation: No such plugin: cloudbees-folder</span><br></pre></td></tr></table></figure><ul><li>可以直接跳过。直接创建管理帐号进入。这个时候插件列表是空的。在插件高中替换URL。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;mirror.xmission.com&#x2F;jenkins&#x2F;updates&#x2F;update-center.json</span><br></pre></td></tr></table></figure><ul><li>end.</li></ul><h2 id="修改Jenkins-工作空間目錄"><a href="#修改Jenkins-工作空間目錄" class="headerlink" title="修改Jenkins 工作空間目錄"></a>修改Jenkins 工作空間目錄</h2><ul><li>系统设置</li></ul><p><img src="https://z201.oss-cn-shanghai.aliyuncs.com/JavaNote/jenkins/3.png"></p><ul><li>这里的工作空间目录有一个环境配置变量。${JENKINS_HOME}</li><li>在系统环境变量中配置JENKINS_HOME 指向新的工作空间。</li></ul><h2 id="Jenkins-shell权限问题。"><a href="#Jenkins-shell权限问题。" class="headerlink" title="Jenkins shell权限问题。"></a>Jenkins shell权限问题。</h2><ul><li>在执行shell 脚本的时候需要修改权限，如果不修改会导致部分权限问题。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]<span class="comment"># vim /etc/sysconfig/jenkins</span></span><br></pre></td></tr></table></figure><ul><li>修改配置文件的 JENKINS_USER = “root”</li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="Maven-Integration-plugin"><a href="#Maven-Integration-plugin" class="headerlink" title="Maven Integration plugin"></a>Maven Integration plugin</h3><blockquote><p>用于Maven项目构建。</p></blockquote><h3 id="Monitoring"><a href="#Monitoring" class="headerlink" title="Monitoring"></a>Monitoring</h3><blockquote><p>监控Jenkins所消耗的系统资源，如内存使用等</p></blockquote><h3 id="Publish-Over-SSH"><a href="#Publish-Over-SSH" class="headerlink" title="Publish Over SSH"></a>Publish Over SSH</h3><blockquote><p>远程Shell</p></blockquote><h3 id="Email-Extersion-Plugin"><a href="#Email-Extersion-Plugin" class="headerlink" title="Email Extersion Plugin"></a><a href="https://wiki.jenkins-ci.org/display/JENKINS/Email-ext+plugin" target="_blank" rel="noopener">Email Extersion Plugin</a></h3><blockquote><p>邮件通知</p></blockquote><h4 id="邮箱配置"><a href="#邮箱配置" class="headerlink" title="邮箱配置"></a>邮箱配置</h4><blockquote><p>jenkins 自带邮箱功能，可以通过邮箱发送任务构建时的信息。</p></blockquote><p><img src="https://z201.oss-cn-shanghai.aliyuncs.com/JavaNote/jenkins/email.png"> </p><ul><li>Jenkins URL 是当前jenkins访问地址 可以是内网也可以是外网。</li></ul><h4 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h4><ul><li>SMTP服务器<ul><li>这个邮件帐号的运营商配置</li><li>配置完后可以测试。</li><li>如果收到邮件说明配置成功。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录最近在Centos7上面部署jenkens。安装的方法有很多，下面采用最简单的方式安装。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在线文档 &lt;a href=&quot;https://jenkins.io/doc/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://jenkins.io/doc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;名词解释：&lt;ul&gt;
&lt;li&gt;CI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;jenkins 是一个协调者的身份，管理和协调了代码库，代码仓库，代码运行环境等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;jenkins-简介&quot;&gt;&lt;a href=&quot;#jenkins-简介&quot; class=&quot;headerlink&quot; title=&quot;jenkins 简介&quot;&gt;&lt;/a&gt;jenkins 简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Jenkins是一个开源软件项目，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。持续集成（CI）已成为当前许多软件开发团队在整个软件开发生命周期内侧重于保证代码质量的常见做法。它是一种实践，旨在缓和和稳固软件的构建过程。并且能够帮助您的开发团队应对如下挑战：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;持续、自动地构建/测试软件项目。&lt;/li&gt;
&lt;li&gt;监控一些定时执行的任务。&lt;/li&gt;
&lt;li&gt;高度可扩展性、全球大量团队使用，并共享代码。&lt;/li&gt;
&lt;li&gt;基于插件、可以做出非常多有趣的事情。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://z201.oss-cn-shanghai.aliyuncs.com/JavaNote/jenkins/2.jpg&quot;&gt; &lt;/p&gt;
&lt;h2 id=&quot;安裝部署&quot;&gt;&lt;a href=&quot;#安裝部署&quot; class=&quot;headerlink&quot; title=&quot;安裝部署&quot;&gt;&lt;/a&gt;安裝部署&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Linux运维" scheme="https://z201.github.io/categories/Linux%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Centos7" scheme="https://z201.github.io/tags/Centos7/"/>
    
      <category term="Jenkins" scheme="https://z201.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins-local-deployment-level</title>
    <link href="https://z201.github.io/2021/02/21/Jenkins-local-deployment-level/"/>
    <id>https://z201.github.io/2021/02/21/Jenkins-local-deployment-level/</id>
    <published>2021-02-21T06:40:48.000Z</published>
    <updated>2021-09-22T15:40:33.682Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>整理下Jenkins本地部署程序的过程。</p></blockquote><ul><li><p>在开发阶段，许多编译工具会将我们的源码编译可使用的文件。例如 <code>vue-cli</code> 的项目会被 <code>webpack</code> 打包编译为浏览器的文件，<code>Java</code> 项目会被编译为 <code>.class/jar</code> 文件以供服务器使用。</p><ol><li><p>开发人员将源代码，经过编译、压缩等一系列流程打包</p></li><li><p>上传到服务器。</p></li><li><p>在服务器将编译后的文件，手动可用的容器服务内（例如 <code>Nginx，Tomcat，Apache</code> 等服务）</p></li></ol></li></ul><h3 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h3><blockquote><p>在jenkins所在的机器上部署程序</p></blockquote><ol><li><a href="https://z201.cn/2021/05/25/Centos7-jenkins%E9%83%A8%E7%BD%B2/" target="_blank" rel="noopener">部署jenkins</a>并配置环境</li><li>设置jenkins-credentials (后续用于从git仓库中获取代码)</li><li>创建任务<ol><li>设置仓库地址</li><li>设置程序部署shell脚本</li></ol></li></ol><ul><li><p>jenkins shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install -Dmaven.test.skip=true</span><br><span class="line">cp x x x/target/xxx-1.0.0-SNAPSHOT.jar /opt/xxx/upgrade</span><br><span class="line">cd /opt/xxx</span><br><span class="line">BUILD_ID=dontKillMe sh xxx.sh</span><br></pre></td></tr></table></figure></li><li><p>编写程序运行shell脚本。</p></li><li><p>部署java</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">app=xxx</span><br><span class="line">appName=$&#123;app&#125;-1.0.0-SNAPSHOT</span><br><span class="line">projPath=/opt/xxx</span><br><span class="line">upgradePath=$&#123;projPath&#125;/upgrade</span><br><span class="line">backPath=$&#123;projPath&#125;/backup</span><br><span class="line">logFile=$&#123;projPath&#125;/data/logs/$&#123;app&#125;.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查升级文件是否存在</span></span><br><span class="line">echo "checking upgrade file..."</span><br><span class="line">if [ ! -f $&#123;upgradePath&#125;/$&#123;appName&#125;.jar ]; then</span><br><span class="line">    echo "cann't found file $&#123;upgradePath&#125;/$&#123;appName&#125;.jar!"</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结束进程</span></span><br><span class="line">pid=`ps aux | grep $&#123;projPath&#125;/$&#123;appName&#125;.jar | grep -v grep | grep -v kill | awk '&#123;print $2&#125;'`</span><br><span class="line">if [ $&#123;pid&#125; ]; then</span><br><span class="line">    echo "kill $&#123;appName&#125;!"</span><br><span class="line">    kill -9 $pid</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 备份原升级文件,如果存在的话</span></span><br><span class="line">if [ -f $&#123;projPath&#125;/$&#123;appName&#125;.jar ]; then</span><br><span class="line">    timeStr=`date +%Y%m%d%H%M%S`</span><br><span class="line">    mv $&#123;projPath&#125;/$&#123;appName&#125;.jar $&#123;backPath&#125;/$&#123;appName&#125;.jar.bak_$&#123;timeStr&#125;</span><br><span class="line">    echo "load $&#123;appName&#125; success!"</span><br><span class="line">    echo "backup $&#123;appName&#125; success!"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝升级文件</span></span><br><span class="line">echo "copy $&#123;appName&#125;.jar..."</span><br><span class="line">cp $&#123;upgradePath&#125;/$&#123;appName&#125;.jar $&#123;projPath&#125;/$&#123;appName&#125;.jar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动进程</span></span><br><span class="line">echo "start $&#123;appName&#125;..."</span><br><span class="line">nohup java -Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx512m -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=256m -jar $&#123;projPath&#125;/$&#123;appName&#125;.jar --spring.profiles.active=test &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看日志</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断当天日志文件是否存在</span></span><br><span class="line">if [ ! -f $&#123;logFile&#125; ]; then</span><br><span class="line">    # 文件不存在则创建文件，再执行tail命令</span><br><span class="line">    touch $&#123;logFile&#125;</span><br><span class="line">fi</span><br><span class="line">echo "tail -f $&#123;logFile&#125;"</span><br></pre></td></tr></table></figure><ul><li>部署vue</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> git revert</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git restore .</span></span><br><span class="line"></span><br><span class="line">applicationPath=/opt/view/xxxx</span><br><span class="line"></span><br><span class="line">echo 'delete old files...'</span><br><span class="line">rm -rf $&#123;applicationPath&#125;/*</span><br><span class="line"></span><br><span class="line">echo 'copy files after npm build!'</span><br><span class="line">cp -rf dist/* $&#123;applicationPath&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;整理下Jenkins本地部署程序的过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在开发阶段，许多编译工具会将我们的源码编译可使用的文件。例如 &lt;code&gt;vue-cli&lt;/code&gt; 的项目会被 &lt;code&gt;webpack&lt;/
      
    
    </summary>
    
    
      <category term="实践" scheme="https://z201.github.io/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="工程化" scheme="https://z201.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Mac安装neo4j和jupyter</title>
    <link href="https://z201.github.io/2021/02/19/Mac%E5%AE%89%E8%A3%85neo4j%E5%92%8Cjupyter/"/>
    <id>https://z201.github.io/2021/02/19/Mac%E5%AE%89%E8%A3%85neo4j%E5%92%8Cjupyter/</id>
    <published>2021-02-18T16:39:21.000Z</published>
    <updated>2021-02-18T16:45:34.018Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>准备学习下neo4j记录在mac下安装neo4j的坑。</p></blockquote><h2 id="neo4j官网网站下载失败"><a href="#neo4j官网网站下载失败" class="headerlink" title="neo4j官网网站下载失败"></a>neo4j官网网站下载失败</h2><blockquote><p>国内只能从镜像地址下载</p></blockquote><p><a href="http://doc.we-yun.com:1008/" target="_blank" rel="noopener">http://doc.we-yun.com:1008/</a> </p><h2 id="配置jdk11"><a href="#配置jdk11" class="headerlink" title="配置jdk11"></a>配置jdk11</h2><blockquote><p>可以查看我上面内容实用Jenv管理多个版本。</p></blockquote><h2 id="启动neo4j"><a href="#启动neo4j" class="headerlink" title="启动neo4j"></a>启动neo4j</h2><blockquote><p>下载完成后解压</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">./neo4j  start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">./neo4j  stop</span><br></pre></td></tr></table></figure><h2 id="neo4j界面"><a href="#neo4j界面" class="headerlink" title="neo4j界面"></a>neo4j界面</h2><ul><li>在浏览器中输入localhost:7474</li><li>初始用户名、密码均为neo4j， 第一次登录需要修改密码</li></ul><h2 id="安装jupyter"><a href="#安装jupyter" class="headerlink" title="安装jupyter"></a>安装jupyter</h2><blockquote><p>注意提前安装python环境</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter notebook -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host=mirrors.aliyun.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查版本</span></span><br><span class="line">jupyter --version</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;准备学习下neo4j记录在mac下安装neo4j的坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;neo4j官网网站下载失败&quot;&gt;&lt;a href=&quot;#neo4j官网网站下载失败&quot; class=&quot;headerlink&quot; title=&quot;neo4
      
    
    </summary>
    
    
      <category term="实践" scheme="https://z201.github.io/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="Neo4j" scheme="https://z201.github.io/tags/Neo4j/"/>
    
      <category term="Jupiter" scheme="https://z201.github.io/tags/Jupiter/"/>
    
  </entry>
  
  <entry>
    <title>Mac下OpenJdk11-JavaFx开发环境配置</title>
    <link href="https://z201.github.io/2021/02/15/Mac%E4%B8%8BOpenJdk11-JavaFx%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://z201.github.io/2021/02/15/Mac%E4%B8%8BOpenJdk11-JavaFx%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2021-02-14T19:12:07.000Z</published>
    <updated>2021-09-19T12:29:55.906Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>OpenJdk 11 环境下JavaFx开发环境设置</p></blockquote><ul><li><a href="https://www.coder.work/article/884639" target="_blank" rel="noopener">https://www.coder.work/article/884639</a></li><li><a href="https://stackoverflow.com/questions/54291958/javafx-11-illegalaccesserror-when-creating-label" target="_blank" rel="noopener">https://stackoverflow.com/questions/54291958/javafx-11-illegalaccesserror-when-creating-label</a></li><li><a href="https://gluonhq.com/products/javafx/" target="_blank" rel="noopener">https://gluonhq.com/products/javafx/</a></li></ul><h2 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjfx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javafx-controls<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjfx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javafx-fxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="idea设置"><a href="#idea设置" class="headerlink" title="idea设置"></a>idea设置</h3><blockquote><p>下载javafx版本，然后引入依赖。项目lib中引入。启动的时候在vm中添加启动参数</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--module-path</span><br><span class="line"><span class="meta">/Users/$</span><span class="bash">USER/word/libhome/javafx-sdk-11.0.2/lib</span></span><br><span class="line">--add-modules</span><br><span class="line">javafx.controls</span><br><span class="line">--add-modules</span><br><span class="line">javafx.base</span><br><span class="line">--add-modules</span><br><span class="line">javafx.graphics</span><br><span class="line">--add-modules</span><br><span class="line">javafx.fxml</span><br><span class="line">--add-modules</span><br><span class="line">javafx.media</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;OpenJdk 11 环境下JavaFx开发环境设置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.coder.work/article/884639&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="实践" scheme="https://z201.github.io/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="openJdk11" scheme="https://z201.github.io/tags/openJdk11/"/>
    
  </entry>
  
  <entry>
    <title>Mac使用Jenv管理多版本Jdk</title>
    <link href="https://z201.github.io/2021/02/15/Mac%E4%BD%BF%E7%94%A8Jenv%E7%AE%A1%E7%90%86%E5%A4%9A%E7%89%88%E6%9C%ACJdk/"/>
    <id>https://z201.github.io/2021/02/15/Mac%E4%BD%BF%E7%94%A8Jenv%E7%AE%A1%E7%90%86%E5%A4%9A%E7%89%88%E6%9C%ACJdk/</id>
    <published>2021-02-14T17:09:36.000Z</published>
    <updated>2021-09-21T14:50:27.796Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简单记录下mac下多版本jdk管理 </p></blockquote><ul><li><a href="https://adoptopenjdk.net/" target="_blank" rel="noopener">https://adoptopenjdk.net/</a></li><li><a href="https://www.jianshu.com/p/1a147d5515f0" target="_blank" rel="noopener">https://www.jianshu.com/p/1a147d5515f0</a></li></ul><h2 id="检查环境"><a href="#检查环境" class="headerlink" title="检查环境"></a>检查环境</h2><h3 id="查看当前安装的jdk版本"><a href="#查看当前安装的jdk版本" class="headerlink" title="查看当前安装的jdk版本"></a>查看当前安装的jdk版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/java_home -V</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果有安装过jdk版本这里会输出信息</span></span><br></pre></td></tr></table></figure><h3 id="使用brew-安装jenv"><a href="#使用brew-安装jenv" class="headerlink" title="使用brew 安装jenv"></a>使用brew 安装jenv</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew install jenv</span><br><span class="line"><span class="meta">#</span><span class="bash">检查</span></span><br><span class="line">jenv doctor </span><br><span class="line"><span class="meta">#</span><span class="bash"> 刚安装会提示很多信息</span></span><br></pre></td></tr></table></figure><h3 id="初始化jenv"><a href="#初始化jenv" class="headerlink" title="初始化jenv"></a>初始化jenv</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install jenv</span><br><span class="line">jenv init -</span><br><span class="line">echo 'eval "$(jenv init -)"' &gt;&gt; ~/.bash_profile</span><br><span class="line">echo 'eval "$(jenv init -)"' &gt;&gt; ~/.zprofile</span><br><span class="line">jenv add &lt;path-to-java8-Home-Dir&gt; # 这里从/usr/libexec/java_home -V 获取javaHome</span><br></pre></td></tr></table></figure><h3 id="切换jdk"><a href="#切换jdk" class="headerlink" title="切换jdk"></a>切换jdk</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ jenv versions</span><br><span class="line">* system (set by /Users/zengqingfeng/.jenv/version)</span><br><span class="line">  1.8</span><br><span class="line">  1.8.0.275</span><br><span class="line">  openjdk64-1.8.0.275</span><br><span class="line">  </span><br><span class="line">➜  ~ jenv local system # 切换版本</span><br></pre></td></tr></table></figure><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><ul><li>使用 jenv 过程可能会发现，当切换 JDK 版本之后， <code>${JAVA_HOME}</code> 环境变量没有改变，还是上一个 JDK 版本配置。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这时可以运行 exec $SHELL -l ， $&#123;JAVA_HOME&#125; 将会变成当前版本。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;简单记录下mac下多版本jdk管理 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://adoptopenjdk.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ado
      
    
    </summary>
    
    
      <category term="实践" scheme="https://z201.github.io/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="jenv" scheme="https://z201.github.io/tags/jenv/"/>
    
      <category term="openJdk11" scheme="https://z201.github.io/tags/openJdk11/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Compose-Redis5.0+Mysql5.7</title>
    <link href="https://z201.github.io/2020/11/20/Docker-Compose-Redis5-0-Mysql5-7/"/>
    <id>https://z201.github.io/2020/11/20/Docker-Compose-Redis5-0-Mysql5-7/</id>
    <published>2020-11-20T07:58:13.000Z</published>
    <updated>2021-01-13T06:46:29.352Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录下使用docker-compose构建管理Redis、mysql。</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>创建工作目录</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p docker docker/mysql docker/mysql/data docker/redis docker/redis/data</span><br><span class="line"><span class="comment"># 使用 tree docker 查看目录结构 yum -y install tree 安装</span></span><br><span class="line">$ tree docker</span><br><span class="line">docker</span><br><span class="line">├── mysql</span><br><span class="line">│   └── data</span><br><span class="line">└── redis</span><br><span class="line">    └── data</span><br><span class="line">$ touch docker/mysql/my.cnf docker/redis/redis.conf </span><br><span class="line">$ tree docker</span><br><span class="line">docker</span><br><span class="line">├── mysql</span><br><span class="line">│   ├── data</span><br><span class="line">│   └── my.cnf</span><br><span class="line">└── redis</span><br><span class="line">    ├── data</span><br><span class="line">    └── redis.conf</span><br></pre></td></tr></table></figure><ol start="2"><li>准备my.conf 、redis.conf<ol><li>my.conf</li></ol></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line"> port = 3306</span><br><span class="line"> socket = /var/lib/mysql/data/mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line"> <span class="comment"># 针对5.7版本执行group by字句出错问题解决</span></span><br><span class="line">sql_mode=<span class="string">'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'</span></span><br><span class="line"> <span class="comment"># 一般配置选项</span></span><br><span class="line"> basedir = /var/lib/mysql</span><br><span class="line"> datadir = /var/lib/mysql/data</span><br><span class="line"> port = 3306</span><br><span class="line"> socket = /var/lib/mysql/data/mysql.sock</span><br><span class="line"> lc-messages-dir = /usr/share/mysql <span class="comment"># 务必配置此项，否则执行sql出错时，只能显示错误代码而不显示具体错误消息</span></span><br><span class="line"> character-set-server=utf8</span><br><span class="line"> back_log = 300</span><br><span class="line"> max_connections = 3000</span><br><span class="line"> max_connect_errors = 50</span><br><span class="line"> table_open_cache = 4096</span><br><span class="line"> max_allowed_packet = 32M</span><br><span class="line"> <span class="comment">#binlog_cache_size = 4M</span></span><br><span class="line"> max_heap_table_size = 128M</span><br><span class="line"> read_rnd_buffer_size = 16M</span><br><span class="line"> sort_buffer_size = 16M</span><br><span class="line"> join_buffer_size = 16M</span><br><span class="line"> thread_cache_size = 16</span><br><span class="line"> query_cache_size = 64M</span><br><span class="line"> query_cache_limit = 4M</span><br><span class="line"> ft_min_word_len = 8</span><br><span class="line"> thread_stack = 512K</span><br><span class="line"> transaction_isolation = REPEATABLE-READ</span><br><span class="line"> tmp_table_size = 64M</span><br><span class="line"> <span class="comment">#log-bin=mysql-bin</span></span><br><span class="line"> long_query_time = 6</span><br><span class="line"> server_id=1</span><br><span class="line"> innodb_buffer_pool_size = 256M</span><br><span class="line"> innodb_thread_concurrency = 16</span><br><span class="line"> innodb_log_buffer_size = 16M</span><br></pre></td></tr></table></figure><ol start="2"><li>redis.conf 可以去这里下载 <a href="https://redis.io/topics/config" target="_blank" rel="noopener">官网</a></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/redis/redis/5.0/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改内容</span></span><br><span class="line">daemonize no     <span class="comment">## 若使用开机启动，生成pid，该项必须设置为诶yes，否则redis将不能够正常执行开机启动(systemctl start redis,执行后一直卡着，直到超时)</span></span><br><span class="line"><span class="comment">#bind 127.0.0.1  ##注释掉，允许所有其他ip访问，真实使用最好坐下限制，只允许某些主机访问</span></span><br><span class="line">protected-mode no  <span class="comment">## 允许其他机器上的客户端连接当前redis，配置文件设置该项，则开机启动处就可以去掉--protected no </span></span><br><span class="line">requirepass root  <span class="comment">##设置密码</span></span><br><span class="line"><span class="comment"># daemonize yes，他的作用是开启守护进程模式，在该模式下，redis会在后台运行，并将进程pid号写入至redis.conf选项pidfile设置的文件中，此时redis将一直运行，除非手动kill该进程。但是在后面的命令中“-d”选项也是开启daemonize，这是docker自家的方式。</span></span><br></pre></td></tr></table></figure><h2 id="编写Docker-Compose文件"><a href="#编写Docker-Compose文件" class="headerlink" title="编写Docker-Compose文件"></a>编写Docker-Compose文件</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">version : <span class="string">'3'</span></span><br><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql/mysql-server:<span class="number">5.7</span>.<span class="number">18</span></span><br><span class="line">    container_name: mysql5.<span class="number">7.18</span>-dev</span><br><span class="line">    networks:</span><br><span class="line">      - net-shop-db</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"3306:3306"</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /opt/docker/mysql/my.cnf:/etc/my.cnf <span class="comment"># 映射数据库配置文件</span></span><br><span class="line">      - /opt/docker/mysql/data:/var/lib/mysql/data  <span class="comment"># 映射数据库保存目录到宿主机，防止数据丢失</span></span><br><span class="line">      - /opt/docker/mysql/log:/var/log/mysql <span class="comment"># 日志文件</span></span><br><span class="line">      - /etc/localtime:/etc/localtime:ro <span class="comment"># 设置容器时区与宿主机保持一致</span></span><br><span class="line">    restart: always <span class="comment"># 设置容器自启模式</span></span><br><span class="line">    command: [</span><br><span class="line">      <span class="string">'--character-set-server=utf8mb4'</span>,</span><br><span class="line">      <span class="string">'--collation-server=utf8mb4_unicode_ci'</span>,</span><br><span class="line">      <span class="string">'--lower_case_table_names=1'</span>,</span><br><span class="line">      <span class="string">'--default-time-zone=+8:00'</span>]</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai <span class="comment"># 设置容器时区与宿主机保持一致</span></span><br><span class="line">      - MYSQL_ROOT_PASSWORD=root <span class="comment"># 设置root密码</span></span><br><span class="line">  redis:</span><br><span class="line">    image: redis:<span class="number">5.0</span>.<span class="number">5</span></span><br><span class="line">    container_name: redis5.<span class="number">0.6</span>-dev</span><br><span class="line">    networks:</span><br><span class="line">      - net-shop-db</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"6379:6379"</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime:ro <span class="comment"># 设置容器时区与宿主机保持一致</span></span><br><span class="line">      - /opt/docker/redis/data:/data</span><br><span class="line">      - /opt/docker/redis/redis.conf:/etc/redis.conf</span><br><span class="line">    command: redis-server /etc/redis.conf <span class="comment"># 启动redis命令</span></span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai <span class="comment"># 设置容器时区与宿主机保持一致</span></span><br><span class="line">    restart: always <span class="comment"># 设置容器自启模式</span></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  net-shop-db:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><blockquote><p>注意需要提前启动docker</p></blockquote><ol><li>创建并启动容器 <code>docker-compose -f docker-compose.yml up -d</code></li><li>批量停止容器并清除容器 <code>docker-compose -f docker-compose.yml down</code></li><li>重新构建容器 <code>docker-compose -f docker-compose.yml up --build -d</code></li><li>启动失败，可以查看容器日志信息获取帮助 <code>docker logs 容器名词或容器ID # 既docker-compose.yml文件参数container_name指定的值</code></li></ol><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ol><li>docker-compose 命令不存在、未找到命令。直接从github上下载，国内下载巨慢。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意查看docker 版本 和 docker-compose 的版本</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.27.4/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment">#。直接用国内的镜像</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.27.4/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://yefeihonours.github.io/post/docker/docker_compose/" target="_blank" rel="noopener">docker-compose 命令不存在、未找到命令</a></p><p><a href="https://zhuanlan.zhihu.com/p/43654441" target="_blank" rel="noopener">使用 docker-compose 在 Docker 中启动有密码的 Redis 容器</a></p><p><a href="https://cloud.tencent.com/developer/article/1678769" target="_blank" rel="noopener">Docker-Compose搭建mysql、redis、zookeeper、rabbitmq、consul、elasticsearch环境</a></p><p><a href="https://juejin.cn/post/6844903655389265927" target="_blank" rel="noopener">Docker Compose多容器部署</a></p><p><a href="https://colobu.com/2018/05/15/Stop-and-remove-all-docker-containers-and-images/" target="_blank" rel="noopener">停止、删除所有的docker容器和镜像</a></p><p><a href="https://my.oschina.net/u/4362704/blog/3308004" target="_blank" rel="noopener">宿主机连接docker中的mysql</a></p><p><a href="https://developer.aliyun.com/article/618035" target="_blank" rel="noopener">Docker Compose 安装 on centos7</a></p><p><a href="https://cloud.tencent.com/developer/article/1678769" target="_blank" rel="noopener">Docker-Compose搭建mysql、redis、zookeeper、rabbitmq、consul、elasticsearch环境</a></p><p><a href="https://zhuanlan.zhihu.com/p/140732202" target="_blank" rel="noopener">docker-compose一键安装redis+mysql+rabbitmq</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记录下使用docker-compose构建管理Redis、mysql。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://z201.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://z201.github.io/tags/Docker/"/>
    
      <category term="Mysql" scheme="https://z201.github.io/tags/Mysql/"/>
    
      <category term="Redis" scheme="https://z201.github.io/tags/Redis/"/>
    
      <category term="Docker-Compose" scheme="https://z201.github.io/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>Centos7.*-Docker部署</title>
    <link href="https://z201.github.io/2020/11/20/Centos7-Docker%E9%83%A8%E7%BD%B2/"/>
    <id>https://z201.github.io/2020/11/20/Centos7-Docker%E9%83%A8%E7%BD%B2/</id>
    <published>2020-11-20T06:26:04.000Z</published>
    <updated>2021-01-12T07:16:48.615Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录下自己在阿里云部署docker记录。</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>准备一台ESC服务器，并可以使用控制台登录。</li><li>检查ESC是否安装了docker，可以选择是否卸载重装。<ol><li>检查docker是否安装,<code>docker 显示相关信息则表示安装</code></li><li>卸载docker，若不重装直接忽略，<code>yum list installed | grep docker</code>查看安装内容</li></ol></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ yum list installed | grep docker</span><br><span class="line">containerd.io.x86_64                1.3.7-3.1.el7                   @docker-ce-stable</span><br><span class="line">docker-ce.x86_64                    3:19.03.13-3.el7                @docker-ce-stable</span><br><span class="line">docker-ce-cli.x86_64                1:19.03.13-3.el7                @docker-ce-stable</span><br><span class="line"><span class="comment"># 依次卸载</span></span><br><span class="line">$ yum -y remove docker-ce.x86_64</span><br><span class="line">$ yum -y remove docker-ce-cli.x86_64</span><br><span class="line">$ yum -y remove containerd.io.x86_64</span><br><span class="line"><span class="comment"># 检查卸载结果</span></span><br><span class="line">$ yum list installed | grep docker</span><br><span class="line"><span class="comment"># 无输出内容</span></span><br><span class="line">$ docker </span><br><span class="line"><span class="comment"># -bash: docekr: 未找到命令 则表示卸载干净了</span></span><br></pre></td></tr></table></figure><ol start="3"><li>安装docker<ol><li>更新yum <code>yum update</code></li><li>获取官方源<code>wget -P /etc/yum.repos.d/ https://download.docker.com/linux/centos/docker-ce.repo</code></li><li>查看可以安装的版本<code>yum list docker-ce --showduplicates | sort -r</code></li><li>选择安装 <code>yum install -y docker-ce-18.03.0.ce-1.el7.centos</code></li><li>安装docker <code>yum install docker -y</code><ol><li>检查<code>docker -v</code>输出版本信息</li></ol></li></ol></li></ol><h2 id="设置docker相关信息"><a href="#设置docker相关信息" class="headerlink" title="设置docker相关信息"></a>设置docker相关信息</h2><ol><li>设置docker开机启动项<code>systemctl enable docker.service</code></li><li>关闭docker开机启动项 <code>systemctl stop docker.service</code></li><li>检查docker当前运行情况 <code>systemctl status docker</code></li><li>若未启动则启动docker <code>systemctl start docker</code> ,若启动了可以重启<code>systemctl restart docker</code></li><li>检查docker运行情况<code>service docker status</code></li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://developer.aliyun.com/article/336442" target="_blank" rel="noopener">阿里云CentOS 7上安装配置Docker</a></p><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-compose-on-centos-7" target="_blank" rel="noopener">How To Install and Use Docker Compose on CentOS 7</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记录下自己在阿里云部署docker记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;准
      
    
    </summary>
    
    
      <category term="Linux运维" scheme="https://z201.github.io/categories/Linux%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Centos7" scheme="https://z201.github.io/tags/Centos7/"/>
    
      <category term="Linux" scheme="https://z201.github.io/tags/Linux/"/>
    
      <category term="Docker" scheme="https://z201.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>源码分析-netty源码环境搭建</title>
    <link href="https://z201.github.io/2020/10/17/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-netty%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://z201.github.io/2020/10/17/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-netty%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-10-16T17:28:40.000Z</published>
    <updated>2021-11-16T17:38:59.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-阅读源代码"><a href="#0x00-阅读源代码" class="headerlink" title="0x00 阅读源代码"></a>0x00 阅读源代码</h2><h3 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h3><ul><li>阅读版本号 <code>netty-4.1.33.Final</code><ul><li>由于github下载速度是在太慢了，这里用gitee克隆一个镜像。</li><li>下载版本<code>git clone -b netty-4.1.33.Final git@gitee.com:Z201/netty.git</code></li></ul></li></ul><h3 id="查看源代码结构"><a href="#查看源代码结构" class="headerlink" title="查看源代码结构"></a>查看源代码结构</h3><ul><li>查看项目主要文件夹</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">tree -d  -L 1    </span><br><span class="line">├── all</span><br><span class="line">├── bom</span><br><span class="line">├── buffer</span><br><span class="line">├── codec</span><br><span class="line">├── codec-dns</span><br><span class="line">├── codec-haproxy</span><br><span class="line">├── codec-http</span><br><span class="line">├── codec-http2</span><br><span class="line">├── codec-memcache</span><br><span class="line">├── codec-mqtt</span><br><span class="line">├── codec-redis</span><br><span class="line">├── codec-smtp</span><br><span class="line">├── codec-socks</span><br><span class="line">├── codec-stomp</span><br><span class="line">├── codec-xml</span><br><span class="line">├── common</span><br><span class="line">├── dev-tools</span><br><span class="line">├── docker</span><br><span class="line">├── example</span><br><span class="line">├── handler</span><br><span class="line">├── handler-proxy</span><br><span class="line">├── license</span><br><span class="line">├── microbench</span><br><span class="line">├── resolver</span><br><span class="line">├── resolver-dns</span><br><span class="line">├── tarball</span><br><span class="line">├── target</span><br><span class="line">├── testsuite</span><br><span class="line">├── testsuite-autobahn</span><br><span class="line">├── testsuite-http2</span><br><span class="line">├── testsuite-osgi</span><br><span class="line">├── testsuite-shading</span><br><span class="line">├── transport</span><br><span class="line">├── transport-native-epoll  (native omitted - reserved keyword <span class="keyword">in</span> Java)</span><br><span class="line">├── transport-native-kqueue (native omitted - reserved keyword <span class="keyword">in</span> Java)</span><br><span class="line">├── transport-native-unix-common (native omitted - reserved keyword <span class="keyword">in</span> Java)</span><br><span class="line">├── transport-native-unix-common-tests </span><br><span class="line">├── transport-rxtx</span><br><span class="line">├── transport-sctp</span><br><span class="line">└── transport-udt</span><br></pre></td></tr></table></figure><ul><li>将项目导入idea中，笔者采用mac系统。这里需要注意需要安装部分软件构件系统。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install autoconf automake libtool</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果安装了国内的镜像出现Error opening archive: Failed to open</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> HOMEBREW_BOTTLE_DOMAIN=<span class="string">''</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参考文档 https://zhuanlan.zhihu.com/p/383707713</span></span><br><span class="line">mvn install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><h2 id="0x01-根据官方文档快速入门"><a href="#0x01-根据官方文档快速入门" class="headerlink" title="0x01 根据官方文档快速入门"></a>0x01 根据官方文档快速入门</h2><blockquote><p>强烈推荐认真阅读netty的官方文档。</p></blockquote><ul><li>官方文档地址 ：<a href="https://netty.io/wiki/index.html" target="_blank" rel="noopener">https://netty.io/wiki/index.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-阅读源代码&quot;&gt;&lt;a href=&quot;#0x00-阅读源代码&quot; class=&quot;headerlink&quot; title=&quot;0x00 阅读源代码&quot;&gt;&lt;/a&gt;0x00 阅读源代码&lt;/h2&gt;&lt;h3 id=&quot;下载源代码&quot;&gt;&lt;a href=&quot;#下载源代码&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="源码分析" scheme="https://z201.github.io/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Netty" scheme="https://z201.github.io/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础（三）</title>
    <link href="https://z201.github.io/2020/09/29/MySQL%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://z201.github.io/2020/09/29/MySQL%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2020-09-29T01:43:58.000Z</published>
    <updated>2021-09-29T01:47:53.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL-常见用法"><a href="#SQL-常见用法" class="headerlink" title="SQL 常见用法"></a>SQL 常见用法</h2><h3 id="1-查找数据的查询"><a href="#1-查找数据的查询" class="headerlink" title="1. 查找数据的查询"></a>1. 查找数据的查询</h3><h4 id="SELECT-用于从数据库中选择数据"><a href="#SELECT-用于从数据库中选择数据" class="headerlink" title="SELECT: 用于从数据库中选择数据"></a><strong>SELECT</strong>: 用于从数据库中选择数据</h4><ul><li><code>SELECT</code> * <code>FROM</code> table_name;</li></ul><h4 id="DISTINCT-用于过滤掉重复的值并返回指定列的行"><a href="#DISTINCT-用于过滤掉重复的值并返回指定列的行" class="headerlink" title="DISTINCT: 用于过滤掉重复的值并返回指定列的行"></a><strong>DISTINCT</strong>: 用于过滤掉重复的值并返回指定列的行</h4><ul><li><code>SELECT DISTINCT</code> column_name;</li></ul><h4 id="WHERE-用于过滤记录-行"><a href="#WHERE-用于过滤记录-行" class="headerlink" title="WHERE: 用于过滤记录/行"></a><strong>WHERE</strong>: 用于过滤记录/行</h4><ul><li><code>SELECT</code> column1, column2 <code>FROM</code> table_name <code>WHERE</code> condition;</li><li><code>SELECT</code> * <code>FROM</code> table_name <code>WHERE</code> condition1 <code>AND</code> condition2;</li><li><code>SELECT</code> * <code>FROM</code> table_name <code>WHERE</code> condition1 <code>OR</code> condition2;</li><li><code>SELECT</code> * <code>FROM</code> table_name <code>WHERE NOT</code> condition;</li><li><code>SELECT</code> * <code>FROM</code> table_name <code>WHERE</code> condition1 <code>AND</code> (condition2 <code>OR</code> condition3);</li><li><code>SELECT</code> * <code>FROM</code> table_name <code>WHERE EXISTS</code> (<code>SELECT</code> column_name <code>FROM</code> table_name <code>WHERE</code> condition);</li></ul><h4 id="ORDER-BY-用于结果集的排序，升序（ASC）或者降序（DESC）"><a href="#ORDER-BY-用于结果集的排序，升序（ASC）或者降序（DESC）" class="headerlink" title="ORDER BY: 用于结果集的排序，升序（ASC）或者降序（DESC）"></a><strong>ORDER BY</strong>: 用于结果集的排序，升序（ASC）或者降序（DESC）</h4><ul><li><code>SELECT</code> * <code>FROM</code> table_name <code>ORDER BY</code> column;</li><li><code>SELECT</code> * <code>FROM</code> table_name <code>ORDER BY</code> column <code>DESC</code>;</li><li><code>SELECT</code> * <code>FROM</code> table_name <code>ORDER BY</code> column1 <code>ASC</code>, column2 <code>DESC</code>;</li></ul><h4 id="SELECT-TOP-用于指定从表顶部返回的记录数"><a href="#SELECT-TOP-用于指定从表顶部返回的记录数" class="headerlink" title="SELECT TOP: 用于指定从表顶部返回的记录数"></a><strong>SELECT TOP</strong>: 用于指定从表顶部返回的记录数</h4><ul><li><code>SELECT TOP</code> number columns_names <code>FROM</code> table_name <code>WHERE</code> condition;</li><li><code>SELECT TOP</code> percent columns_names <code>FROM</code> table_name <code>WHERE</code> condition;</li><li>并非所有数据库系统都支持<code>SELECT TOP</code>。 MySQL 中是<code>LIMIT</code>子句</li><li><code>SELECT</code> column_names <code>FROM</code> table_name <code>LIMIT</code> offset, count;</li></ul><h4 id="LIKE-用于搜索列中的特定模式，WHERE-子句中使用的运算符"><a href="#LIKE-用于搜索列中的特定模式，WHERE-子句中使用的运算符" class="headerlink" title="LIKE: 用于搜索列中的特定模式，WHERE 子句中使用的运算符"></a><strong>LIKE</strong>: 用于搜索列中的特定模式，WHERE 子句中使用的运算符</h4><ul><li>% (percent sign) 是一个表示零个，一个或多个字符的通配符</li><li>_ (underscore) 是一个表示单个字符通配符</li><li><code>SELECT</code> column_names <code>FROM</code> table_name <code>WHERE</code> column_name <code>LIKE</code> pattern;</li><li><code>LIKE</code> ‘a%’    （查找任何以“a”开头的值）</li><li><code>LIKE</code> ‘%a’    （查找任何以“a”结尾的值）</li><li><code>LIKE</code> ‘%or%’  （查找任何包含“or”的值）</li><li><code>LIKE</code> ‘_r%’   （查找任何第二位是“r”的值）</li><li><code>LIKE</code> ‘a_%_%’ （查找任何以“a”开头且长度至少为3的值）</li><li><code>LIKE</code> ‘[a-c]%’（查找任何以“a”或“b”或“c”开头的值）</li></ul><h4 id="IN-用于在-WHERE-子句中指定多个值的运算符"><a href="#IN-用于在-WHERE-子句中指定多个值的运算符" class="headerlink" title="IN: 用于在 WHERE 子句中指定多个值的运算符"></a><strong>IN</strong>: 用于在 WHERE 子句中指定多个值的运算符</h4><ul><li>本质上，IN运算符是多个OR条件的简写</li><li><code>SELECT</code> column_names <code>FROM</code> table_name <code>WHERE</code> column_name <code>IN</code> (value1, value2, …);</li><li><code>SELECT</code> column_names <code>FROM</code> table_name <code>WHERE</code> column_name <code>IN</code> (<code>SELECT STATEMENT</code>);</li></ul><h4 id="BETWEEN-用于过滤给定范围的值的运算符"><a href="#BETWEEN-用于过滤给定范围的值的运算符" class="headerlink" title="BETWEEN: 用于过滤给定范围的值的运算符"></a><strong>BETWEEN</strong>: 用于过滤给定范围的值的运算符</h4><ul><li><code>SELECT</code> column_names <code>FROM</code> table_name <code>WHERE</code> column_name <code>BETWEEN</code> value1 <code>AND</code> value2;</li><li><code>SELECT</code> * <code>FROM</code> Products <code>WHERE</code> (column_name <code>BETWEEN</code> value1 <code>AND</code> value2) <code>AND NOT</code> column_name2 <code>IN</code> (value3, value4);</li><li><code>SELECT</code> * <code>FROM</code> Products <code>WHERE</code> column_name <code>BETWEEN</code> #01/07/1999# AND #03/12/1999#;</li></ul><h4 id="NULL-代表一个字段没有值"><a href="#NULL-代表一个字段没有值" class="headerlink" title="NULL: 代表一个字段没有值"></a><strong>NULL</strong>: 代表一个字段没有值</h4><ul><li><code>SELECT</code> * <code>FROM</code> table_name <code>WHERE</code> column_name <code>IS NULL</code>;</li><li><code>SELECT</code> * <code>FROM</code> table_name <code>WHERE</code> column_name <code>IS NOT NULL</code>;</li></ul><h4 id="AS-用于给表或者列分配别名"><a href="#AS-用于给表或者列分配别名" class="headerlink" title="AS: 用于给表或者列分配别名"></a><strong>AS</strong>: 用于给表或者列分配别名</h4><ul><li><code>SELECT</code> column_name <code>AS</code> alias_name <code>FROM</code> table_name;</li><li><code>SELECT</code> column_name <code>FROM</code> table_name <code>AS</code> alias_name;</li><li><code>SELECT</code> column_name <code>AS</code> alias_name1, column_name2 <code>AS</code> alias_name2;</li><li><code>SELECT</code> column_name1, column_name2 + ‘, ‘ + column_name3 <code>AS</code> alias_name;</li></ul><h4 id="UNION-用于组合两个或者多个-SELECT-语句的结果集的运算符"><a href="#UNION-用于组合两个或者多个-SELECT-语句的结果集的运算符" class="headerlink" title="UNION: 用于组合两个或者多个 SELECT 语句的结果集的运算符"></a><strong>UNION</strong>: 用于组合两个或者多个 SELECT 语句的结果集的运算符</h4><ul><li>每个 SELECT 语句必须拥有相同的列数</li><li>列必须拥有相似的数据类型</li><li>每个 SELECT 语句中的列也必须具有相同的顺序</li><li><code>SELECT</code> columns_names <code>FROM</code> table1 <code>UNION SELECT</code> column_name <code>FROM</code> table2;</li><li><code>UNION</code> 仅允许选择不同的值, <code>UNION ALL</code> 允许重复</li></ul><h4 id="ANY-ALL-用于检查-WHERE-或-HAVING-子句中使用的子查询条件的运算符"><a href="#ANY-ALL-用于检查-WHERE-或-HAVING-子句中使用的子查询条件的运算符" class="headerlink" title="ANY|ALL: 用于检查 WHERE 或 HAVING 子句中使用的子查询条件的运算符"></a><strong>ANY|ALL</strong>: 用于检查 WHERE 或 HAVING 子句中使用的子查询条件的运算符</h4><ul><li><code>ANY</code> 如果任何子查询值满足条件，则返回 true。</li><li><code>ALL</code> 如果所有子查询值都满足条件，则返回 true。</li><li><code>SELECT</code> columns_names <code>FROM</code> table1 <code>WHERE</code> column_name operator (<code>ANY</code>|<code>ALL</code>) (<code>SELECT</code> column_name <code>FROM</code> table_name <code>WHERE</code> condition);</li></ul><h4 id="GROUP-BY-通常与聚合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，用于将结果集分组为一列或多列"><a href="#GROUP-BY-通常与聚合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，用于将结果集分组为一列或多列" class="headerlink" title="GROUP BY: 通常与聚合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，用于将结果集分组为一列或多列"></a><strong>GROUP BY</strong>: 通常与聚合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，用于将结果集分组为一列或多列</h4><ul><li><code>SELECT</code> column_name1, COUNT(column_name2) <code>FROM</code> table_name <code>WHERE</code> condition <code>GROUP BY</code> column_name1 <code>ORDER BY</code> COUNT(column_name2) DESC;</li></ul><h4 id="HAVING-HAVING-子句指定-SELECT-语句应仅返回聚合值满足指定条件的行。它被添加到-SQL-语言中，因为WHERE关键字不能与聚合函数一起使用。"><a href="#HAVING-HAVING-子句指定-SELECT-语句应仅返回聚合值满足指定条件的行。它被添加到-SQL-语言中，因为WHERE关键字不能与聚合函数一起使用。" class="headerlink" title="HAVING: HAVING 子句指定 SELECT 语句应仅返回聚合值满足指定条件的行。它被添加到 SQL 语言中，因为WHERE关键字不能与聚合函数一起使用。"></a><strong>HAVING</strong>: HAVING 子句指定 SELECT 语句应仅返回聚合值满足指定条件的行。它被添加到 SQL 语言中，因为WHERE关键字不能与聚合函数一起使用。</h4><ul><li><code>SELECT</code> <code>COUNT</code>(column_name1), column_name2 <code>FROM</code> table <code>GROUP BY</code> column_name2 <code>HAVING</code> <code>COUNT(</code>column_name1<code>)</code> &gt; 5;</li></ul><a id="more"></a><h3 id="2-修改数据的查询"><a href="#2-修改数据的查询" class="headerlink" title="2. 修改数据的查询"></a>2. 修改数据的查询</h3><h4 id="INSERT-INTO-用于在表中插入新记录-行"><a href="#INSERT-INTO-用于在表中插入新记录-行" class="headerlink" title="INSERT INTO: 用于在表中插入新记录/行"></a><strong>INSERT INTO</strong>: 用于在表中插入新记录/行</h4><ul><li><code>INSERT INTO</code> table_name (column1, column2) <code>VALUES</code> (value1, value2);</li><li><code>INSERT INTO</code> table_name <code>VALUES</code> (value1, value2 …);</li></ul><h4 id="UPDATE-用于修改表中的现有记录-行"><a href="#UPDATE-用于修改表中的现有记录-行" class="headerlink" title="UPDATE: 用于修改表中的现有记录/行"></a><strong>UPDATE</strong>: 用于修改表中的现有记录/行</h4><ul><li><code>UPDATE</code> table_name <code>SET</code> column1 = value1, column2 = value2 <code>WHERE</code> condition;</li><li><code>UPDATE</code> table_name <code>SET</code> column_name = value;</li></ul><h4 id="DELETE-用于删除表中的现有记录-行"><a href="#DELETE-用于删除表中的现有记录-行" class="headerlink" title="DELETE: 用于删除表中的现有记录/行"></a><strong>DELETE</strong>: 用于删除表中的现有记录/行</h4><ul><li><code>DELETE FROM</code> table_name <code>WHERE</code> condition;</li><li><code>DELETE</code> * <code>FROM</code> table_name;</li></ul><h3 id="3-聚合查询"><a href="#3-聚合查询" class="headerlink" title="3. 聚合查询"></a>3. 聚合查询</h3><h4 id="COUNT-返回出现次数"><a href="#COUNT-返回出现次数" class="headerlink" title="COUNT: 返回出现次数"></a><strong>COUNT</strong>: 返回出现次数</h4><ul><li><code>SELECT COUNT (DISTINCT</code> column_name<code>)</code>;</li></ul><h4 id="MIN-and-MAX-返回所选列的最小-最大值"><a href="#MIN-and-MAX-返回所选列的最小-最大值" class="headerlink" title="MIN() and MAX(): 返回所选列的最小/最大值"></a><strong>MIN() and MAX()</strong>: 返回所选列的最小/最大值</h4><ul><li><code>SELECT MIN (</code>column_names<code>) FROM</code> table_name <code>WHERE</code> condition;</li><li><code>SELECT MAX (</code>column_names<code>) FROM</code> table_name <code>WHERE</code> condition;</li></ul><h4 id="AVG-返回数字列的平均值"><a href="#AVG-返回数字列的平均值" class="headerlink" title="AVG(): 返回数字列的平均值"></a><strong>AVG()</strong>: 返回数字列的平均值</h4><ul><li><code>SELECT AVG (</code>column_name<code>) FROM</code> table_name <code>WHERE</code> condition;</li></ul><h4 id="SUM-返回数值列的总和"><a href="#SUM-返回数值列的总和" class="headerlink" title="SUM(): 返回数值列的总和"></a><strong>SUM()</strong>: 返回数值列的总和</h4><ul><li><code>SELECT SUM (</code>column_name<code>) FROM</code> table_name <code>WHERE</code> condition;</li></ul><h3 id="4-连接查询"><a href="#4-连接查询" class="headerlink" title="4. 连接查询"></a>4. 连接查询</h3><h4 id="INNER-JOIN-内连接，返回在两张表中具有匹配值的记录"><a href="#INNER-JOIN-内连接，返回在两张表中具有匹配值的记录" class="headerlink" title="INNER JOIN: 内连接，返回在两张表中具有匹配值的记录"></a><strong>INNER JOIN</strong>: 内连接，返回在两张表中具有匹配值的记录</h4><ul><li><code>SELECT</code> column_names <code>FROM</code> table1 <code>INNER JOIN</code> table2 <code>ON</code> table1.column_name=table2.column_name;</li><li><code>SELECT</code> table1.column_name1, table2.column_name2, table3.column_name3 <code>FROM</code> ((table1 <code>INNER JOIN</code> table2 <code>ON</code> relationship) <code>INNER JOIN</code> table3 <code>ON</code> relationship);</li></ul><h4 id="LEFT-OUTER-JOIN-左外连接，返回左表（table1）中的所有记录，以及右表中的匹配记录（table2）"><a href="#LEFT-OUTER-JOIN-左外连接，返回左表（table1）中的所有记录，以及右表中的匹配记录（table2）" class="headerlink" title="LEFT (OUTER) JOIN: 左外连接，返回左表（table1）中的所有记录，以及右表中的匹配记录（table2）"></a><strong>LEFT (OUTER) JOIN</strong>: 左外连接，返回左表（table1）中的所有记录，以及右表中的匹配记录（table2）</h4><ul><li><code>SELECT</code> column_names <code>FROM</code> table1 <code>LEFT JOIN</code> table2 <code>ON</code> table1.column_name=table2.column_name;</li></ul><h4 id="RIGHT-OUTER-JOIN-右外连接，返回右表（table2）中的所有记录，以及左表（table1）中匹配的记录"><a href="#RIGHT-OUTER-JOIN-右外连接，返回右表（table2）中的所有记录，以及左表（table1）中匹配的记录" class="headerlink" title="RIGHT (OUTER) JOIN: 右外连接，返回右表（table2）中的所有记录，以及左表（table1）中匹配的记录"></a><strong>RIGHT (OUTER) JOIN</strong>: 右外连接，返回右表（table2）中的所有记录，以及左表（table1）中匹配的记录</h4><ul><li><code>SELECT</code> column_names <code>FROM</code> table1 <code>RIGHT JOIN</code> table2 <code>ON</code> table1.column_name=table2.column_name;</li></ul><h4 id="FULL-OUTER-JOIN-全外连接，全连接是左右外连接的并集-连接表包含被连接的表的所有记录-如果缺少匹配的记录-以-NULL-填充。"><a href="#FULL-OUTER-JOIN-全外连接，全连接是左右外连接的并集-连接表包含被连接的表的所有记录-如果缺少匹配的记录-以-NULL-填充。" class="headerlink" title="FULL (OUTER) JOIN: 全外连接，全连接是左右外连接的并集. 连接表包含被连接的表的所有记录, 如果缺少匹配的记录, 以 NULL 填充。"></a><strong>FULL (OUTER) JOIN</strong>: 全外连接，全连接是左右外连接的并集. 连接表包含被连接的表的所有记录, 如果缺少匹配的记录, 以 NULL 填充。</h4><ul><li><code>SELECT</code> column_names <code>FROM</code> table1 <code>FULL OUTER JOIN</code> table2 <code>ON</code> table1.column_name=table2.column_name;</li></ul><h4 id="Self-JOIN-自连接，表自身连接"><a href="#Self-JOIN-自连接，表自身连接" class="headerlink" title="Self JOIN: 自连接，表自身连接"></a><strong>Self JOIN</strong>: 自连接，表自身连接</h4><ul><li><code>SELECT</code> column_names <code>FROM</code> table1 T1, table1 T2 <code>WHERE</code> condition;</li></ul><h3 id="5-视图查询"><a href="#5-视图查询" class="headerlink" title="5. 视图查询"></a>5. 视图查询</h3><h4 id="CREATE-创建视图"><a href="#CREATE-创建视图" class="headerlink" title="CREATE: 创建视图"></a><strong>CREATE</strong>: 创建视图</h4><ul><li><code>CREATE VIEW</code> view_name <code>AS SELECT</code> column1, column2 <code>FROM</code> table_name <code>WHERE</code> condition;</li></ul><h4 id="SELECT-检索视图"><a href="#SELECT-检索视图" class="headerlink" title="SELECT: 检索视图"></a><strong>SELECT</strong>: 检索视图</h4><ul><li><code>SELECT</code> * <code>FROM</code> view_name;</li></ul><h4 id="DROP-删除视图"><a href="#DROP-删除视图" class="headerlink" title="DROP: 删除视图"></a><strong>DROP</strong>: 删除视图</h4><ul><li><code>DROP VIEW</code> view_name;</li></ul><h3 id="6-修改表的查询"><a href="#6-修改表的查询" class="headerlink" title="6. 修改表的查询"></a>6. 修改表的查询</h3><h4 id="ADD-添加字段"><a href="#ADD-添加字段" class="headerlink" title="ADD: 添加字段"></a><strong>ADD</strong>: 添加字段</h4><ul><li><code>ALTER TABLE</code> table_name <code>ADD</code> column_name column_definition;</li></ul><h4 id="MODIFY-修改字段数据类型"><a href="#MODIFY-修改字段数据类型" class="headerlink" title="MODIFY: 修改字段数据类型"></a><strong>MODIFY</strong>: 修改字段数据类型</h4><ul><li><code>ALTER TABLE</code> table_name <code>MODIFY</code> column_name column_type;</li></ul><h4 id="DROP-删除字段"><a href="#DROP-删除字段" class="headerlink" title="DROP: 删除字段"></a><strong>DROP</strong>: 删除字段</h4><ul><li><code>ALTER TABLE</code> table_name <code>DROP COLUMN</code> column_name;</li></ul><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ABS(x)         <span class="comment">--返回x的绝对值</span></span><br><span class="line">BIN(x)         <span class="comment">--返回x的二进制（OCT返回八进制，HEX返回十六进制）</span></span><br><span class="line">CEILING(x)     <span class="comment">--返回大于x的最小整数值</span></span><br><span class="line">EXP(x)         <span class="comment">--返回值e（自然对数的底）的x次方</span></span><br><span class="line">FLOOR(x)       <span class="comment">--返回小于x的最大整数值</span></span><br><span class="line">GREATEST(x1,x2,...,xn)</span><br><span class="line">                <span class="comment">--返回集合中最大的值</span></span><br><span class="line">LEAST(x1,x2,...,xn)   </span><br><span class="line">                <span class="comment">--返回集合中最小的值</span></span><br><span class="line">LN(x)           <span class="comment">--返回x的自然对数</span></span><br><span class="line">LOG(x,y)        <span class="comment">--返回x的以y为底的对数</span></span><br><span class="line">MOD(x,y)        <span class="comment">--返回x/y的模（余数）</span></span><br><span class="line">PI()            <span class="comment">--返回pi的值（圆周率）</span></span><br><span class="line">RAND()          <span class="comment">--返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。</span></span><br><span class="line">ROUND(x,y)      <span class="comment">--返回参数x的四舍五入的有y位小数的值</span></span><br><span class="line">SIGN(x)         <span class="comment">--返回代表数字x的符号的值</span></span><br><span class="line">SQRT(x)         <span class="comment">--返回一个数的平方根</span></span><br><span class="line"><span class="keyword">TRUNCATE</span>(x,y)   <span class="comment">--返回数字x截短为y位小数的结果</span></span><br></pre></td></tr></table></figure><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AVG(X)            <span class="comment">--返回指定列的平均值</span></span><br><span class="line">COUNT(X)          <span class="comment">--返回指定列中非NULL值的个数</span></span><br><span class="line">MIN(X)            <span class="comment">--返回指定列的最小值</span></span><br><span class="line">MAX(X)            <span class="comment">--返回指定列的最大值</span></span><br><span class="line">SUM(X)            <span class="comment">--返回指定列的所有值之和</span></span><br><span class="line">GROUP_CONCAT(X)   <span class="comment">--返回由属于一组的列值连接组合而成的结果，非常有用</span></span><br></pre></td></tr></table></figure><h3 id="字符串函数（20个）"><a href="#字符串函数（20个）" class="headerlink" title="字符串函数（20个）"></a>字符串函数（20个）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">ASCII(char)        <span class="comment">--返回字符的ASCII码值</span></span><br><span class="line">BIT_LENGTH(str)    <span class="comment">--返回字符串的比特长度</span></span><br><span class="line">CONCAT(s1,s2...,sn) </span><br><span class="line">                   <span class="comment">--将s1,s2...,sn连接成字符串</span></span><br><span class="line">CONCAT_WS(sep,s1,s2...,sn)</span><br><span class="line">                   <span class="comment">--将s1,s2...,sn连接成字符串，并用sep字符间隔</span></span><br><span class="line"><span class="keyword">INSERT</span>(<span class="keyword">str</span>,x,y,<span class="keyword">instr</span>) </span><br><span class="line">                   <span class="comment">--将字符串str从第x位置开始，y个字符长的子串替换为字符串instr，返回结果</span></span><br><span class="line">FIND_IN_SET(<span class="keyword">str</span>,<span class="keyword">list</span>)</span><br><span class="line">                   <span class="comment">--分析逗号分隔的list列表，如果发现str，返回str在list中的位置</span></span><br><span class="line"><span class="keyword">LCASE</span>(<span class="keyword">str</span>)或<span class="keyword">LOWER</span>(<span class="keyword">str</span>) </span><br><span class="line">                   <span class="comment">--返回将字符串str中所有字符改变为小写后的结果</span></span><br><span class="line"><span class="keyword">LEFT</span>(<span class="keyword">str</span>,x)        <span class="comment">--返回字符串str中最左边的x个字符</span></span><br><span class="line"><span class="keyword">LENGTH</span>(s)          <span class="comment">--返回字符串str中的字符数</span></span><br><span class="line"><span class="keyword">LTRIM</span>(<span class="keyword">str</span>)         <span class="comment">--从字符串str中切掉开头的空格</span></span><br><span class="line"><span class="keyword">POSITION</span>(<span class="keyword">substr</span>,<span class="keyword">str</span>) </span><br><span class="line">                   <span class="comment">--返回子串substr在字符串str中第一次出现的位置</span></span><br><span class="line">QUOTE(<span class="keyword">str</span>)         <span class="comment">--用反斜杠转义str中的单引号</span></span><br><span class="line"><span class="keyword">REPEAT</span>(<span class="keyword">str</span>,srchstr,rplcstr)</span><br><span class="line">                   <span class="comment">--返回字符串str重复x次的结果</span></span><br><span class="line"><span class="keyword">REVERSE</span>(<span class="keyword">str</span>)       <span class="comment">--返回颠倒字符串str的结果</span></span><br><span class="line"><span class="keyword">RIGHT</span>(<span class="keyword">str</span>,x)       <span class="comment">--返回字符串str中最右边的x个字符</span></span><br><span class="line"><span class="keyword">RTRIM</span>(<span class="keyword">str</span>)         <span class="comment">--返回字符串str尾部的空格</span></span><br><span class="line"><span class="keyword">STRCMP</span>(s1,s2)      <span class="comment">--比较字符串s1和s2</span></span><br><span class="line"><span class="keyword">TRIM</span>(<span class="keyword">str</span>)          <span class="comment">--去除字符串首部和尾部的所有空格</span></span><br><span class="line"><span class="keyword">UCASE</span>(<span class="keyword">str</span>)或<span class="keyword">UPPER</span>(<span class="keyword">str</span>) </span><br><span class="line">                   <span class="comment">--返回将字符串str中所有字符转变为大写后的结果</span></span><br></pre></td></tr></table></figure><h3 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">CURDATE()或CURRENT_DATE() </span><br><span class="line">                   <span class="comment">--返回当前的日期</span></span><br><span class="line">CURTIME()或CURRENT_TIME() </span><br><span class="line">                   <span class="comment">--返回当前的时间</span></span><br><span class="line">DATE_ADD(date,INTERVAL int keyword)</span><br><span class="line">                   <span class="comment">--返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化)</span></span><br><span class="line"><span class="comment">-- 例如</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_ADD</span>(<span class="keyword">CURRENT_DATE</span>,<span class="built_in">INTERVAL</span> <span class="number">6</span> <span class="keyword">MONTH</span>);</span><br><span class="line"></span><br><span class="line">DATE_FORMAT(date,fmt)  </span><br><span class="line">                   <span class="comment">--依照指定的fmt格式格式化日期date值</span></span><br><span class="line">DATE_SUB(date,INTERVAL int keyword)</span><br><span class="line">                   <span class="comment">--返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化)</span></span><br><span class="line"><span class="comment">-- 例如</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_SUB</span>(<span class="keyword">CURRENT_DATE</span>,<span class="built_in">INTERVAL</span> <span class="number">6</span> <span class="keyword">MONTH</span>);</span><br><span class="line"></span><br><span class="line">DAYOFWEEK(date)    <span class="comment">--返回date所代表的一星期中的第几天(1~7)</span></span><br><span class="line">DAYOFMONTH(date)   <span class="comment">--返回date是一个月的第几天(1~31)</span></span><br><span class="line">DAYOFYEAR(date)    <span class="comment">--返回date是一年的第几天(1~366)</span></span><br><span class="line">DAYNAME(date)      <span class="comment">--返回date的星期名，如：SELECT DAYNAME(CURRENT_DATE);</span></span><br><span class="line">FROM_UNIXTIME(ts,fmt)  </span><br><span class="line">                   <span class="comment">--根据指定的fmt格式，格式化UNIX时间戳ts</span></span><br><span class="line">HOUR(time)         <span class="comment">--返回time的小时值(0~23)</span></span><br><span class="line">MINUTE(time)       <span class="comment">--返回time的分钟值(0~59)</span></span><br><span class="line">MONTH(date)        <span class="comment">--返回date的月份值(1~12)</span></span><br><span class="line">MONTHNAME(date)    <span class="comment">--返回date的月份名，如：SELECT MONTHNAME(CURRENT_DATE);</span></span><br><span class="line">NOW()              <span class="comment">--返回当前的日期和时间</span></span><br><span class="line">QUARTER(date)      <span class="comment">--返回date在一年中的季度(1~4)</span></span><br><span class="line"><span class="comment">-- 例如</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">QUARTER</span>(<span class="keyword">CURRENT_DATE</span>);</span><br><span class="line"></span><br><span class="line">WEEK(date)         <span class="comment">--返回日期date为一年中第几周(0~53)</span></span><br><span class="line">YEAR(date)         <span class="comment">--返回日期date的年份(1000~9999)</span></span><br><span class="line"><span class="comment">-- 例如，获取当前系统时间</span></span><br><span class="line"><span class="keyword">SELECT</span> FROM_UNIXTIME(<span class="keyword">UNIX_TIMESTAMP</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXTRACT</span>(YEAR_MONTH <span class="keyword">FROM</span> <span class="keyword">CURRENT_DATE</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXTRACT</span>(DAY_SECOND <span class="keyword">FROM</span> <span class="keyword">CURRENT_DATE</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXTRACT</span>(HOUR_MINUTE <span class="keyword">FROM</span> <span class="keyword">CURRENT_DATE</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 返回两个日期值之间的差值(月数)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">PERIOD_DIFF</span>(<span class="number">200302</span>,<span class="number">199802</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在Mysql中计算年龄：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">FROM_DAYS</span>(<span class="keyword">TO_DAYS</span>(<span class="keyword">NOW</span>())-<span class="keyword">TO_DAYS</span>(birthday)),<span class="string">'%Y'</span>)+<span class="number">0</span> <span class="keyword">AS</span> age <span class="keyword">FROM</span> employee;</span><br><span class="line"><span class="comment">-- 这样，如果Brithday是未来的年月日的话，计算结果为0。</span></span><br><span class="line"><span class="comment">-- 下面的SQL语句计算员工的绝对年龄，即当Birthday是未来的日期时，将得到负值。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(), <span class="string">'%Y'</span>) </span><br><span class="line">- <span class="keyword">DATE_FORMAT</span>(birthday, <span class="string">'%Y'</span>) </span><br><span class="line">-(<span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(), <span class="string">'00-%m-%d'</span>) </span><br><span class="line">&lt; <span class="keyword">DATE_FORMAT</span>(birthday, <span class="string">'00-%m-%d'</span>)) <span class="keyword">AS</span> age <span class="keyword">from</span> employee</span><br></pre></td></tr></table></figure><h3 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">AES_ENCRYPT(str,key)  </span><br><span class="line"><span class="comment">--返回用密钥key对字符串str利用高级加密标准算法加密后的结果，调用AES_ENCRYPT的结果是一个二进制字符串，以BLOB类型存储</span></span><br><span class="line">AES_DECRYPT(str,key)  </span><br><span class="line">                   <span class="comment">--返回用密钥key对字符串str利用高级加密标准算法解密后的结果</span></span><br><span class="line">DECODE(str,key)    <span class="comment">--使用key作为密钥解密加密字符串str</span></span><br><span class="line">ENCRYPT(str,salt)  <span class="comment">--使用UNIXcrypt()函数，用关键词salt(一个可以惟一确定口令的字符串，就像钥匙一样)加密字符串str</span></span><br><span class="line">ENCODE(str,key)    <span class="comment">--使用key作为密钥加密字符串str，调用ENCODE()的结果是一个二进制字符串，它以BLOB类型存储</span></span><br><span class="line">MD5()              <span class="comment">--计算字符串str的MD5校验和</span></span><br><span class="line">PASSWORD(str)      <span class="comment">--返回字符串str的加密版本，这个加密过程是不可逆转的，和UNIX密码加密过程使用不同的算法。</span></span><br><span class="line">SHA()              <span class="comment">--计算字符串str的安全散列算法(SHA)校验和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例如</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ENCRYPT</span>(<span class="string">'root'</span>,<span class="string">'salt'</span>) ;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ENCODE</span>(<span class="string">'xufeng'</span>,<span class="string">'key'</span>) ;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DECODE</span>(<span class="keyword">ENCODE</span>(<span class="string">'xufeng'</span>,<span class="string">'key'</span>),<span class="string">'key'</span>) ;<span class="comment">--加解密放在一起</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AES_ENCRYPT</span>(<span class="string">'root'</span>,<span class="string">'key'</span>) ;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AES_DECRYPT</span>(<span class="keyword">AES_ENCRYPT</span>(<span class="string">'root'</span>,<span class="string">'key'</span>),<span class="string">'key'</span>) ;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MD5</span>(<span class="string">'123456'</span>) ;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SHA</span>(<span class="string">'123456'</span>) ;</span><br></pre></td></tr></table></figure><h3 id="控制流函数"><a href="#控制流函数" class="headerlink" title="控制流函数"></a>控制流函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">CASE WHEN [test1] THEN [result1]...ELSE [default] <span class="keyword">END</span> </span><br><span class="line">                    <span class="comment">--如果test1是真，则返回result1，否则返回default</span></span><br><span class="line"><span class="keyword">CASE</span> [<span class="keyword">test</span>] <span class="keyword">WHEN</span> [val1] <span class="keyword">THEN</span> [<span class="keyword">result</span>]...ELSE [<span class="keyword">default</span>] <span class="keyword">END</span>  </span><br><span class="line">                    <span class="comment">--如果test和valN相等，则返回result，否则返回default</span></span><br><span class="line"><span class="keyword">IF</span>(<span class="keyword">test</span>,t,f)        <span class="comment">--如果test是真，返回t；否则返回f</span></span><br><span class="line"><span class="keyword">IFNULL</span>(arg1,arg2)   <span class="comment">--如果arg1不是空，返回arg1，否则返回arg2</span></span><br><span class="line"><span class="keyword">NULLIF</span>(arg1,arg2)   <span class="comment">--如果arg1=arg2返回NULL；否则返回arg1</span></span><br><span class="line"><span class="comment">-- 这些函数的第一个是IFNULL()，它有两个参数，并且对第一个参数进行判断。</span></span><br><span class="line"><span class="comment">-- 如果第一个参数不是NULL，函数就会向调用者返回第一个参数；</span></span><br><span class="line"><span class="comment">-- 如果是NULL,将返回第二个参数。</span></span><br><span class="line"><span class="comment">-- 例如</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IFNULL</span>(<span class="number">1</span>,<span class="number">2</span>), </span><br><span class="line"><span class="keyword">IFNULL</span>(<span class="literal">NULL</span>,<span class="number">10</span>),</span><br><span class="line"><span class="keyword">IFNULL</span>(<span class="number">4</span>*<span class="literal">NULL</span>,<span class="string">'false'</span>);</span><br><span class="line"></span><br><span class="line">NULLIF() <span class="comment">-- 函数将会检验提供的两个参数是否相等，如果相等，则返回NULL，</span></span><br><span class="line"><span class="comment">-- 如果不相等，就返回第一个参数。</span></span><br><span class="line"><span class="comment">-- 例如</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">NULLIF</span>(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line"> <span class="keyword">NULLIF</span>(<span class="string">'A'</span>,<span class="string">'B'</span>),</span><br><span class="line"> <span class="keyword">NULLIF</span>(<span class="number">2</span>+<span class="number">3</span>,<span class="number">4</span>+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">MySQL的IF()</span><br><span class="line"><span class="comment">-- 函数也可以建立一个简单的条件测试，</span></span><br><span class="line"><span class="comment">-- 这个函数有三个参数，第一个是要被判断的表达式，</span></span><br><span class="line"><span class="comment">-- 如果表达式为真，IF()将会返回第二个参数，</span></span><br><span class="line"><span class="comment">-- 如果为假，IF()将会返回第三个参数。</span></span><br><span class="line"><span class="comment">-- 例如</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="number">1</span>&lt;<span class="number">10</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="keyword">IF</span>(<span class="number">56</span>&gt;<span class="number">100</span>,<span class="string">'true'</span>,<span class="string">'false'</span>);</span><br><span class="line"><span class="comment">-- IF()函数在只有两种可能结果时才适合使用。</span></span><br><span class="line"><span class="comment">-- 然而，在现实世界中，我们可能发现在条件测试中会需要多个分支。</span></span><br><span class="line"><span class="comment">-- 在这种情况下，它和PHP及Perl语言的switch-case条件例程一样。</span></span><br><span class="line"></span><br><span class="line">CASE</span><br><span class="line"><span class="comment">-- 函数的格式有些复杂，通常如下所示：</span></span><br><span class="line">CASE [expression to be evaluated]</span><br><span class="line">WHEN [val 1] THEN [result 1]</span><br><span class="line">WHEN [val 2] THEN [result 2]</span><br><span class="line">WHEN [val 3] THEN [result 3]</span><br><span class="line">......</span><br><span class="line">WHEN [val n] THEN [result n]</span><br><span class="line">ELSE [default result]</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="comment">-- 这里，第一个参数是要被判断的值或表达式，接下来的是一系列的WHEN-THEN块，</span></span><br><span class="line"><span class="comment">-- 每一块的第一个参数指定要比较的值，如果为真，就返回结果。</span></span><br><span class="line"><span class="comment">-- 所有的WHEN-THEN块将以ELSE块结束，当END结束了所有外部的CASE块时，</span></span><br><span class="line"><span class="comment">-- 如果前面的每一个块都不匹配就会返回ELSE块指定的默认结果。</span></span><br><span class="line"><span class="comment">-- 如果没有指定ELSE块，而且所有的WHEN-THEN比较都不是真，MySQL将会返回NULL。</span></span><br><span class="line"><span class="keyword">CASE</span>函数还有另外一种句法，有时使用起来非常方便，如下：</span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> [conditional <span class="keyword">test</span> <span class="number">1</span>] <span class="keyword">THEN</span> [<span class="keyword">result</span> <span class="number">1</span>]</span><br><span class="line"><span class="keyword">WHEN</span> [conditional <span class="keyword">test</span> <span class="number">2</span>] <span class="keyword">THEN</span> [<span class="keyword">result</span> <span class="number">2</span>]</span><br><span class="line"><span class="keyword">ELSE</span> [<span class="keyword">default</span> <span class="keyword">result</span>]</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="comment">-- 这种条件下，返回的结果取决于相应的条件测试是否为真。</span></span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">CASE</span> <span class="string">'green'</span></span><br><span class="line">      <span class="keyword">WHEN</span> <span class="string">'red'</span> <span class="keyword">THEN</span> <span class="string">'stop'</span></span><br><span class="line">      <span class="keyword">WHEN</span> <span class="string">'green'</span> <span class="keyword">THEN</span> <span class="string">'go'</span> <span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span>  <span class="number">9</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'a'</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">'b'</span> <span class="keyword">ELSE</span> <span class="string">'N/A'</span> <span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> (<span class="number">2</span>+<span class="number">2</span>)=<span class="number">4</span> <span class="keyword">THEN</span> <span class="string">'OK'</span> </span><br><span class="line"><span class="keyword">WHEN</span> (<span class="number">2</span>+<span class="number">2</span>)&lt;&gt;<span class="number">4</span> <span class="keyword">THEN</span> <span class="string">'not OK'</span> <span class="keyword">END</span> <span class="keyword">AS</span> <span class="keyword">STATUS</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">Name</span>,<span class="keyword">IF</span>((IsActive = <span class="number">1</span>),<span class="string">'已激活'</span>,<span class="string">'未激活'</span>) <span class="keyword">AS</span> <span class="keyword">RESULT</span> </span><br><span class="line"><span class="keyword">FROM</span> UserLoginInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> fname,lname,(math+sci+lit) <span class="keyword">AS</span> total,</span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> (math+sci+lit) &lt; <span class="number">50</span> <span class="keyword">THEN</span> <span class="string">'D'</span></span><br><span class="line">     <span class="keyword">WHEN</span> (math+sci+lit) <span class="keyword">BETWEEN</span> <span class="number">50</span> <span class="keyword">AND</span> <span class="number">150</span> <span class="keyword">THEN</span> <span class="string">'C'</span></span><br><span class="line">     <span class="keyword">WHEN</span> (math+sci+lit) <span class="keyword">BETWEEN</span> <span class="number">151</span> <span class="keyword">AND</span> <span class="number">250</span> <span class="keyword">THEN</span> <span class="string">'B'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">'A'</span> <span class="keyword">END</span> <span class="keyword">AS</span> grade <span class="keyword">FROM</span> marks ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="keyword">ENCRYPT</span>(<span class="string">'sue'</span>,<span class="string">'ts'</span>)=upass,<span class="string">'allow'</span>,<span class="string">'deny'</span>) <span class="keyword">AS</span> LoginResult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> uname = <span class="string">'sue'</span>;</span><br></pre></td></tr></table></figure><h3 id="格式化函数"><a href="#格式化函数" class="headerlink" title="格式化函数"></a>格式化函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DATE_FORMAT(date,fmt)  </span><br><span class="line">                  <span class="comment">--依照字符串fmt格式化日期date值</span></span><br><span class="line">FORMAT(x,y)       <span class="comment">--把x格式化为以逗号隔开的数字序列，y是结果的小数位数</span></span><br><span class="line">INET_ATON(ip)     <span class="comment">--返回IP地址的数字表示</span></span><br><span class="line">INET_NTOA(num)    <span class="comment">--返回数字所代表的IP地址</span></span><br><span class="line">TIME_FORMAT(time,fmt)   </span><br><span class="line">                  <span class="comment">--依照字符串fmt格式化时间time值</span></span><br><span class="line"><span class="comment">-- 其中最简单的是FORMAT()函数，</span></span><br><span class="line"><span class="comment">-- 它可以把大的数值格式化为以逗号间隔的易读的序列。</span></span><br><span class="line"><span class="comment">-- 例如</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FORMAT</span>(<span class="number">34234.34323432</span>,<span class="number">3</span>) ;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">'%W,%D %M %Y %r'</span>) ;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">'%Y-%m-%d'</span>) ;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(<span class="number">19990330</span>,<span class="string">'%Y-%m-%d'</span>) ;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">'%h:%i %p'</span>) ;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INET_ATON</span>(<span class="string">'10.122.89.47'</span>) ;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INET_NTOA</span>(<span class="number">175790383</span>) ;</span><br></pre></td></tr></table></figure><h3 id="类型转化函数"><a href="#类型转化函数" class="headerlink" title="类型转化函数"></a>类型转化函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 为了进行数据类型转化，MySQL提供了CAST()函数，</span></span><br><span class="line"><span class="comment">-- 它可以把一个值转化为指定的数据类型。</span></span><br><span class="line"><span class="comment">-- 类型有：</span></span><br><span class="line">BINARY,CHAR,DATE,TIME,DATETIME,SIGNED,UNSIGNED</span><br><span class="line"><span class="comment">-- 例如</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CAST</span>(<span class="keyword">NOW</span>() <span class="keyword">AS</span> SIGNED <span class="built_in">INTEGER</span>),<span class="keyword">CURDATE</span>()+<span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">'f'</span>=<span class="built_in">BINARY</span> <span class="string">'F'</span>,<span class="string">'f'</span>=<span class="keyword">CAST</span>(<span class="string">'F'</span> <span class="keyword">AS</span> <span class="built_in">BINARY</span>);</span><br></pre></td></tr></table></figure><h3 id="系统信息函数"><a href="#系统信息函数" class="headerlink" title="系统信息函数"></a>系统信息函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DATABASE()         <span class="comment">--返回当前数据库名</span></span><br><span class="line">BENCHMARK(count,expr)   </span><br><span class="line">                   <span class="comment">--将表达式expr重复运行count次</span></span><br><span class="line">CONNECTION_ID()    <span class="comment">--返回当前客户的连接ID</span></span><br><span class="line">FOUND_ROWS()       <span class="comment">--返回最后一个SELECT查询进行检索的总行数</span></span><br><span class="line">USER()或SYSTEM_USER()  </span><br><span class="line">                   <span class="comment">--返回当前登陆用户名</span></span><br><span class="line">VERSION()          <span class="comment">--返回MySQL服务器的版本</span></span><br><span class="line"><span class="comment">-- 例如</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>(),<span class="keyword">VERSION</span>(),<span class="keyword">USER</span>();</span><br><span class="line">SELECTBENCHMARK(9999999,LOG(RAND()*PI()));</span><br><span class="line"><span class="comment">--该例中,MySQL计算LOG(RAND()*PI())表达式9999999次。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SQL-常见用法&quot;&gt;&lt;a href=&quot;#SQL-常见用法&quot; class=&quot;headerlink&quot; title=&quot;SQL 常见用法&quot;&gt;&lt;/a&gt;SQL 常见用法&lt;/h2&gt;&lt;h3 id=&quot;1-查找数据的查询&quot;&gt;&lt;a href=&quot;#1-查找数据的查询&quot; class=&quot;headerlink&quot; title=&quot;1. 查找数据的查询&quot;&gt;&lt;/a&gt;1. 查找数据的查询&lt;/h3&gt;&lt;h4 id=&quot;SELECT-用于从数据库中选择数据&quot;&gt;&lt;a href=&quot;#SELECT-用于从数据库中选择数据&quot; class=&quot;headerlink&quot; title=&quot;SELECT: 用于从数据库中选择数据&quot;&gt;&lt;/a&gt;&lt;strong&gt;SELECT&lt;/strong&gt;: 用于从数据库中选择数据&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; * &lt;code&gt;FROM&lt;/code&gt; table_name;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;DISTINCT-用于过滤掉重复的值并返回指定列的行&quot;&gt;&lt;a href=&quot;#DISTINCT-用于过滤掉重复的值并返回指定列的行&quot; class=&quot;headerlink&quot; title=&quot;DISTINCT: 用于过滤掉重复的值并返回指定列的行&quot;&gt;&lt;/a&gt;&lt;strong&gt;DISTINCT&lt;/strong&gt;: 用于过滤掉重复的值并返回指定列的行&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT DISTINCT&lt;/code&gt; column_name;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;WHERE-用于过滤记录-行&quot;&gt;&lt;a href=&quot;#WHERE-用于过滤记录-行&quot; class=&quot;headerlink&quot; title=&quot;WHERE: 用于过滤记录/行&quot;&gt;&lt;/a&gt;&lt;strong&gt;WHERE&lt;/strong&gt;: 用于过滤记录/行&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; column1, column2 &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE&lt;/code&gt; condition;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; * &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE&lt;/code&gt; condition1 &lt;code&gt;AND&lt;/code&gt; condition2;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; * &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE&lt;/code&gt; condition1 &lt;code&gt;OR&lt;/code&gt; condition2;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; * &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE NOT&lt;/code&gt; condition;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; * &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE&lt;/code&gt; condition1 &lt;code&gt;AND&lt;/code&gt; (condition2 &lt;code&gt;OR&lt;/code&gt; condition3);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; * &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE EXISTS&lt;/code&gt; (&lt;code&gt;SELECT&lt;/code&gt; column_name &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE&lt;/code&gt; condition);&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ORDER-BY-用于结果集的排序，升序（ASC）或者降序（DESC）&quot;&gt;&lt;a href=&quot;#ORDER-BY-用于结果集的排序，升序（ASC）或者降序（DESC）&quot; class=&quot;headerlink&quot; title=&quot;ORDER BY: 用于结果集的排序，升序（ASC）或者降序（DESC）&quot;&gt;&lt;/a&gt;&lt;strong&gt;ORDER BY&lt;/strong&gt;: 用于结果集的排序，升序（ASC）或者降序（DESC）&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; * &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;ORDER BY&lt;/code&gt; column;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; * &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;ORDER BY&lt;/code&gt; column &lt;code&gt;DESC&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; * &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;ORDER BY&lt;/code&gt; column1 &lt;code&gt;ASC&lt;/code&gt;, column2 &lt;code&gt;DESC&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;SELECT-TOP-用于指定从表顶部返回的记录数&quot;&gt;&lt;a href=&quot;#SELECT-TOP-用于指定从表顶部返回的记录数&quot; class=&quot;headerlink&quot; title=&quot;SELECT TOP: 用于指定从表顶部返回的记录数&quot;&gt;&lt;/a&gt;&lt;strong&gt;SELECT TOP&lt;/strong&gt;: 用于指定从表顶部返回的记录数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT TOP&lt;/code&gt; number columns_names &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE&lt;/code&gt; condition;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT TOP&lt;/code&gt; percent columns_names &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE&lt;/code&gt; condition;&lt;/li&gt;
&lt;li&gt;并非所有数据库系统都支持&lt;code&gt;SELECT TOP&lt;/code&gt;。 MySQL 中是&lt;code&gt;LIMIT&lt;/code&gt;子句&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; column_names &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;LIMIT&lt;/code&gt; offset, count;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;LIKE-用于搜索列中的特定模式，WHERE-子句中使用的运算符&quot;&gt;&lt;a href=&quot;#LIKE-用于搜索列中的特定模式，WHERE-子句中使用的运算符&quot; class=&quot;headerlink&quot; title=&quot;LIKE: 用于搜索列中的特定模式，WHERE 子句中使用的运算符&quot;&gt;&lt;/a&gt;&lt;strong&gt;LIKE&lt;/strong&gt;: 用于搜索列中的特定模式，WHERE 子句中使用的运算符&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;% (percent sign) 是一个表示零个，一个或多个字符的通配符&lt;/li&gt;
&lt;li&gt;_ (underscore) 是一个表示单个字符通配符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; column_names &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE&lt;/code&gt; column_name &lt;code&gt;LIKE&lt;/code&gt; pattern;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LIKE&lt;/code&gt; ‘a%’    （查找任何以“a”开头的值）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LIKE&lt;/code&gt; ‘%a’    （查找任何以“a”结尾的值）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LIKE&lt;/code&gt; ‘%or%’  （查找任何包含“or”的值）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LIKE&lt;/code&gt; ‘_r%’   （查找任何第二位是“r”的值）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LIKE&lt;/code&gt; ‘a_%_%’ （查找任何以“a”开头且长度至少为3的值）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LIKE&lt;/code&gt; ‘[a-c]%’（查找任何以“a”或“b”或“c”开头的值）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;IN-用于在-WHERE-子句中指定多个值的运算符&quot;&gt;&lt;a href=&quot;#IN-用于在-WHERE-子句中指定多个值的运算符&quot; class=&quot;headerlink&quot; title=&quot;IN: 用于在 WHERE 子句中指定多个值的运算符&quot;&gt;&lt;/a&gt;&lt;strong&gt;IN&lt;/strong&gt;: 用于在 WHERE 子句中指定多个值的运算符&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;本质上，IN运算符是多个OR条件的简写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; column_names &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE&lt;/code&gt; column_name &lt;code&gt;IN&lt;/code&gt; (value1, value2, …);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; column_names &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE&lt;/code&gt; column_name &lt;code&gt;IN&lt;/code&gt; (&lt;code&gt;SELECT STATEMENT&lt;/code&gt;);&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;BETWEEN-用于过滤给定范围的值的运算符&quot;&gt;&lt;a href=&quot;#BETWEEN-用于过滤给定范围的值的运算符&quot; class=&quot;headerlink&quot; title=&quot;BETWEEN: 用于过滤给定范围的值的运算符&quot;&gt;&lt;/a&gt;&lt;strong&gt;BETWEEN&lt;/strong&gt;: 用于过滤给定范围的值的运算符&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; column_names &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE&lt;/code&gt; column_name &lt;code&gt;BETWEEN&lt;/code&gt; value1 &lt;code&gt;AND&lt;/code&gt; value2;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; * &lt;code&gt;FROM&lt;/code&gt; Products &lt;code&gt;WHERE&lt;/code&gt; (column_name &lt;code&gt;BETWEEN&lt;/code&gt; value1 &lt;code&gt;AND&lt;/code&gt; value2) &lt;code&gt;AND NOT&lt;/code&gt; column_name2 &lt;code&gt;IN&lt;/code&gt; (value3, value4);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; * &lt;code&gt;FROM&lt;/code&gt; Products &lt;code&gt;WHERE&lt;/code&gt; column_name &lt;code&gt;BETWEEN&lt;/code&gt; #01/07/1999# AND #03/12/1999#;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;NULL-代表一个字段没有值&quot;&gt;&lt;a href=&quot;#NULL-代表一个字段没有值&quot; class=&quot;headerlink&quot; title=&quot;NULL: 代表一个字段没有值&quot;&gt;&lt;/a&gt;&lt;strong&gt;NULL&lt;/strong&gt;: 代表一个字段没有值&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; * &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE&lt;/code&gt; column_name &lt;code&gt;IS NULL&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; * &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE&lt;/code&gt; column_name &lt;code&gt;IS NOT NULL&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;AS-用于给表或者列分配别名&quot;&gt;&lt;a href=&quot;#AS-用于给表或者列分配别名&quot; class=&quot;headerlink&quot; title=&quot;AS: 用于给表或者列分配别名&quot;&gt;&lt;/a&gt;&lt;strong&gt;AS&lt;/strong&gt;: 用于给表或者列分配别名&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; column_name &lt;code&gt;AS&lt;/code&gt; alias_name &lt;code&gt;FROM&lt;/code&gt; table_name;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; column_name &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;AS&lt;/code&gt; alias_name;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; column_name &lt;code&gt;AS&lt;/code&gt; alias_name1, column_name2 &lt;code&gt;AS&lt;/code&gt; alias_name2;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; column_name1, column_name2 + ‘, ‘ + column_name3 &lt;code&gt;AS&lt;/code&gt; alias_name;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;UNION-用于组合两个或者多个-SELECT-语句的结果集的运算符&quot;&gt;&lt;a href=&quot;#UNION-用于组合两个或者多个-SELECT-语句的结果集的运算符&quot; class=&quot;headerlink&quot; title=&quot;UNION: 用于组合两个或者多个 SELECT 语句的结果集的运算符&quot;&gt;&lt;/a&gt;&lt;strong&gt;UNION&lt;/strong&gt;: 用于组合两个或者多个 SELECT 语句的结果集的运算符&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;每个 SELECT 语句必须拥有相同的列数&lt;/li&gt;
&lt;li&gt;列必须拥有相似的数据类型&lt;/li&gt;
&lt;li&gt;每个 SELECT 语句中的列也必须具有相同的顺序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; columns_names &lt;code&gt;FROM&lt;/code&gt; table1 &lt;code&gt;UNION SELECT&lt;/code&gt; column_name &lt;code&gt;FROM&lt;/code&gt; table2;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNION&lt;/code&gt; 仅允许选择不同的值, &lt;code&gt;UNION ALL&lt;/code&gt; 允许重复&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ANY-ALL-用于检查-WHERE-或-HAVING-子句中使用的子查询条件的运算符&quot;&gt;&lt;a href=&quot;#ANY-ALL-用于检查-WHERE-或-HAVING-子句中使用的子查询条件的运算符&quot; class=&quot;headerlink&quot; title=&quot;ANY|ALL: 用于检查 WHERE 或 HAVING 子句中使用的子查询条件的运算符&quot;&gt;&lt;/a&gt;&lt;strong&gt;ANY|ALL&lt;/strong&gt;: 用于检查 WHERE 或 HAVING 子句中使用的子查询条件的运算符&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ANY&lt;/code&gt; 如果任何子查询值满足条件，则返回 true。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ALL&lt;/code&gt; 如果所有子查询值都满足条件，则返回 true。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; columns_names &lt;code&gt;FROM&lt;/code&gt; table1 &lt;code&gt;WHERE&lt;/code&gt; column_name operator (&lt;code&gt;ANY&lt;/code&gt;|&lt;code&gt;ALL&lt;/code&gt;) (&lt;code&gt;SELECT&lt;/code&gt; column_name &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE&lt;/code&gt; condition);&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;GROUP-BY-通常与聚合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，用于将结果集分组为一列或多列&quot;&gt;&lt;a href=&quot;#GROUP-BY-通常与聚合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，用于将结果集分组为一列或多列&quot; class=&quot;headerlink&quot; title=&quot;GROUP BY: 通常与聚合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，用于将结果集分组为一列或多列&quot;&gt;&lt;/a&gt;&lt;strong&gt;GROUP BY&lt;/strong&gt;: 通常与聚合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，用于将结果集分组为一列或多列&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; column_name1, COUNT(column_name2) &lt;code&gt;FROM&lt;/code&gt; table_name &lt;code&gt;WHERE&lt;/code&gt; condition &lt;code&gt;GROUP BY&lt;/code&gt; column_name1 &lt;code&gt;ORDER BY&lt;/code&gt; COUNT(column_name2) DESC;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;HAVING-HAVING-子句指定-SELECT-语句应仅返回聚合值满足指定条件的行。它被添加到-SQL-语言中，因为WHERE关键字不能与聚合函数一起使用。&quot;&gt;&lt;a href=&quot;#HAVING-HAVING-子句指定-SELECT-语句应仅返回聚合值满足指定条件的行。它被添加到-SQL-语言中，因为WHERE关键字不能与聚合函数一起使用。&quot; class=&quot;headerlink&quot; title=&quot;HAVING: HAVING 子句指定 SELECT 语句应仅返回聚合值满足指定条件的行。它被添加到 SQL 语言中，因为WHERE关键字不能与聚合函数一起使用。&quot;&gt;&lt;/a&gt;&lt;strong&gt;HAVING&lt;/strong&gt;: HAVING 子句指定 SELECT 语句应仅返回聚合值满足指定条件的行。它被添加到 SQL 语言中，因为WHERE关键字不能与聚合函数一起使用。&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; &lt;code&gt;COUNT&lt;/code&gt;(column_name1), column_name2 &lt;code&gt;FROM&lt;/code&gt; table &lt;code&gt;GROUP BY&lt;/code&gt; column_name2 &lt;code&gt;HAVING&lt;/code&gt; &lt;code&gt;COUNT(&lt;/code&gt;column_name1&lt;code&gt;)&lt;/code&gt; &amp;gt; 5;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="实践" scheme="https://z201.github.io/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="MySQL" scheme="https://z201.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>实践-centos7搭建selenium-java运行环境</title>
    <link href="https://z201.github.io/2020/08/31/%E5%AE%9E%E8%B7%B5-centos7%E6%90%AD%E5%BB%BAselenium-java%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/"/>
    <id>https://z201.github.io/2020/08/31/%E5%AE%9E%E8%B7%B5-centos7%E6%90%AD%E5%BB%BAselenium-java%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</id>
    <published>2020-08-31T01:45:59.000Z</published>
    <updated>2020-10-27T08:31:58.324Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在编写爬虫程序，这里简单的做下笔记。</p></blockquote><h3 id="阅读注意事项"><a href="#阅读注意事项" class="headerlink" title="阅读注意事项"></a>阅读注意事项</h3><ol><li>需要一台服务器(阿里ESC)这种，分配的公网ip。</li><li>这里使用的yum安装，所以环境配置都创建好了，不需要在手动修改。</li></ol><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><blockquote><p>安装Java、maven、git、selenium运行环境</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用的机器是centos7.4</span></span><br><span class="line"><span class="comment"># 系统环境一个一个来安装。</span></span><br><span class="line"><span class="comment"># 1.检查是否安装jdk</span></span><br><span class="line">-&gt; yum install java-1.8.0-openjdk-devel.x86_64</span><br><span class="line">-&gt; java -version</span><br><span class="line">openjdk version <span class="string">"1.8.0_262"</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_262-b10)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.262-b10, mixed mode)</span><br><span class="line">-&gt; yum install maven</span><br><span class="line">-&gt; mvn -version</span><br><span class="line">Java version: 1.8.0_262, vendor: Oracle Corporation</span><br><span class="line">Java home: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class="line">OS name: <span class="string">"linux"</span>, version: <span class="string">"3.10.0-862.el7.x86_64"</span>, arch: <span class="string">"amd64"</span>, family: <span class="string">"unix"</span></span><br><span class="line">-&gt; yum install git</span><br><span class="line">git version 1.8.3.1</span><br><span class="line"><span class="comment"># 查看是否生成过证书</span></span><br><span class="line">-&gt; ls -al ~/.ssh</span><br><span class="line"><span class="comment"># 这里配置下ssh公钥方便git拉去代码</span></span><br><span class="line">-&gt; ssh-keygen -t rsa -C “you email@gamil.com”</span><br><span class="line"><span class="comment"># 查看证书</span></span><br><span class="line">-&gt; cat ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment"># 开始配置 selenium 运行环境</span></span><br><span class="line">-&gt; wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</span><br><span class="line">-&gt; yum localinstall google-chrome-stable_current_x86_64.rpm</span><br><span class="line"><span class="comment"># 检查版本 </span></span><br><span class="line">-&gt; google-chrome --version </span><br><span class="line">Google Chrome 85.0.4183.83 </span><br><span class="line"><span class="comment"># 安装 chromedriver</span></span><br><span class="line">-&gt; yum install chromedriver</span><br><span class="line">-&gt; chromedriver -version</span><br><span class="line">ChromeDriver 84.0.4147.89 </span><br><span class="line"><span class="comment"># 这里注意 chromedriver 可能与chrome的版本不一致，去官方网站下载后解压复制到/usr/bin中</span></span><br><span class="line"><span class="comment"># 下载地址 https://chromedriver.chromium.org/</span></span><br></pre></td></tr></table></figure><ul><li>注意 google-chrome 和 chromedriver版本是需要对应的具体可以到官方查看。</li><li>在centos上运行需要配置下关键参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ChromeOptions chromeOptions = <span class="keyword">new</span> ChromeOptions();</span><br><span class="line">   chromeOptions.addArguments(<span class="string">"--headless"</span>);</span><br><span class="line">   chromeOptions.addArguments(<span class="string">"--disable-gpu"</span>); <span class="comment">// 不配置一定报错</span></span><br><span class="line">   chromeOptions.addArguments(<span class="string">"--no-sandbox"</span>);</span><br><span class="line">   <span class="comment">// 创建无界面浏览器对象</span></span><br><span class="line">   chromeOptions.setHeadless(<span class="keyword">true</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> ChromeDriver(chromeOptions);</span><br></pre></td></tr></table></figure><ul><li>启动代码的需要指定环境变量</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">"webdriver.chrome.chromedriver"</span>, <span class="string">"/usr/bin/chromedriver"</span>);</span><br><span class="line"># 具体可以通过 whereis chromedriver查看。</span><br></pre></td></tr></table></figure><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://segmentfault.com/a/1190000015389941" target="_blank" rel="noopener">CentOS使用yum安装jdk</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近在编写爬虫程序，这里简单的做下笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;阅读注意事项&quot;&gt;&lt;a href=&quot;#阅读注意事项&quot; class=&quot;headerlink&quot; title=&quot;阅读注意事项&quot;&gt;&lt;/a&gt;阅读注意事项&lt;/h3&gt;&lt;o
      
    
    </summary>
    
    
      <category term="实践" scheme="https://z201.github.io/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="Java" scheme="https://z201.github.io/tags/Java/"/>
    
      <category term="selenium" scheme="https://z201.github.io/tags/selenium/"/>
    
      <category term="爬虫" scheme="https://z201.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>实践-nginx配置https</title>
    <link href="https://z201.github.io/2020/08/26/%E5%AE%9E%E8%B7%B5-nginx%E9%85%8D%E7%BD%AEhttps/"/>
    <id>https://z201.github.io/2020/08/26/%E5%AE%9E%E8%B7%B5-nginx%E9%85%8D%E7%BD%AEhttps/</id>
    <published>2020-08-26T13:42:22.000Z</published>
    <updated>2020-11-23T07:32:24.462Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在搭建测试环境，很久没接触nginx了。</p></blockquote><h3 id="阅读注意事项"><a href="#阅读注意事项" class="headerlink" title="阅读注意事项"></a>阅读注意事项</h3><ol><li>需要一个域名，并且在国内备案过。</li><li>需要一台服务器(阿里ESC)这种，分配的公网ip。</li><li>申请或者购买一张证书。和域名做关联，域名解析到服务器的公网ip。注意开放服务区的80、443端口。<ol><li>证书有两个文件<ol><li><code>domian.name.key domain.name.pem</code></li></ol></li><li>吧证书上传到目标nginx服务器中。</li><li>检查服务器防火墙</li></ol></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=http</span><br><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="开始步骤"><a href="#开始步骤" class="headerlink" title="开始步骤"></a>开始步骤</h3><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><blockquote><p>服务器使用的Centos服务器 使用yum安装nginx。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-&gt; yum install -y nginx</span><br><span class="line"><span class="comment">#检查nginx安装位置信息</span></span><br><span class="line">-&gt; whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib64/nginx /etc/nginx /usr/share/nginx /usr/share/man/man3/nginx.3pm.gz /usr/share/man/man8/nginx.8.gz</span><br><span class="line"><span class="comment"># 实际上是安装到/etc/nginx里面了</span></span><br><span class="line"><span class="comment"># 设置开机自动启动nginx</span></span><br><span class="line">-&gt; sudo systemctl <span class="built_in">enable</span> nginx</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.</span><br><span class="line"><span class="comment"># 切换到nginx安装目录</span></span><br><span class="line">-&gt; <span class="built_in">cd</span> /etc/nginx</span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">-&gt; nginx</span><br><span class="line"><span class="comment"># 测试nginx 在浏览器里面请求http://ip 就可以了看到nginx页面就算安装成功</span></span><br></pre></td></tr></table></figure><h4 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建证书文件并且将证书复制近文件中</span></span><br><span class="line">-&gt; <span class="built_in">cd</span> /etc/nginx</span><br><span class="line">-&gt; mkdir cert</span><br><span class="line">-&gt; mv domian.name.key /etc/nginx/cert/</span><br><span class="line">-&gt; mv domian.name.pem /etc/nginx/cert/</span><br><span class="line"><span class="comment"># 配置nginx.conf文件使证书生效，并将80端口转发到443端口上。</span></span><br><span class="line">-&gt; vim nginx.conf</span><br><span class="line"><span class="comment">#以下属性中以ssl开头的属性代表与证书配置有关，其他属性请根据自己的需要进行配置。</span></span><br><span class="line">server &#123;</span><br><span class="line">         listen 443; <span class="comment">#配置HTTPS的默认访问端口号为443。此处如果未配置HTTPS的默认访问端口，可能会造成Nginx无法启动。Nginx 1.15.0以上版本请使用listen 443 ssl代替listen 443和ssl on。</span></span><br><span class="line">         server_name www.certificatestests.com; <span class="comment">#将www.certificatestests.com修改为您证书绑定的域名，例如：www.example.com。如果您购买的是通配符域名证书，要修改为通配符域名，例如：*.aliyun.com。</span></span><br><span class="line">         root html;</span><br><span class="line">         index index.html index.htm;</span><br><span class="line">         ssl_certificate cert/domain name.pem;  <span class="comment">#将domain name.pem替换成您证书的文件名称。</span></span><br><span class="line">         ssl_certificate_key cert/domain name.key; <span class="comment">#将domain name.key替换成您证书的密钥文件名称。</span></span><br><span class="line">         ssl_session_timeout 5m;</span><br><span class="line">         ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; <span class="comment">#使用此加密套件。</span></span><br><span class="line">         ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <span class="comment">#使用该协议进行配置。</span></span><br><span class="line">         ssl_prefer_server_ciphers on;</span><br><span class="line">         location / &#123;</span><br><span class="line">         root html;  <span class="comment">#站点目录。</span></span><br><span class="line">         index index.html index.htm;</span><br><span class="line">                    &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"><span class="comment">#        listen       80 default_server;</span></span><br><span class="line"><span class="comment">#        listen       [::]:80 default_server;</span></span><br><span class="line"><span class="comment">#        server_name  _;</span></span><br><span class="line">        listen 80;</span><br><span class="line">        listen [::]:80;</span><br><span class="line">        server_name www.certificatestests.com;</span><br><span class="line">        <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment"># 保存并推出、检查配置nginx配置文件是否合法、并重启nginx</span></span><br><span class="line">-&gt; nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line">-&gt; nginx -s reload</span><br></pre></td></tr></table></figure><h4 id="测试域名证书是否生效"><a href="#测试域名证书是否生效" class="headerlink" title="测试域名证书是否生效"></a>测试域名证书是否生效</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;domian</span><br><span class="line">http:&#x2F;&#x2F;domian 检查是否安全链接即可。一般浏览器上面会出现一个安全的标志</span><br></pre></td></tr></table></figure><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://help.aliyun.com/document_detail/98728.html?spm=5176.2020520163.0.dexternal.3e4756a7jNJMZQ" target="_blank" rel="noopener">阿里云帮助文档-在Nginx上配置证书</a></p><p><a href="https://segmentfault.com/a/1190000018109309" target="_blank" rel="noopener">CentOS 7 上安装最新版 Nginx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近在搭建测试环境，很久没接触nginx了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;阅读注意事项&quot;&gt;&lt;a href=&quot;#阅读注意事项&quot; class=&quot;headerlink&quot; title=&quot;阅读注意事项&quot;&gt;&lt;/a&gt;阅读注意事项&lt;/h3&gt;
      
    
    </summary>
    
    
      <category term="实践" scheme="https://z201.github.io/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="Nginx" scheme="https://z201.github.io/tags/Nginx/"/>
    
      <category term="Https" scheme="https://z201.github.io/tags/Https/"/>
    
  </entry>
  
  <entry>
    <title>实践-spring-boot替换内置tomcat版本</title>
    <link href="https://z201.github.io/2020/07/23/%E5%AE%9E%E8%B7%B5-spring-boot%E6%9B%BF%E6%8D%A2%E5%86%85%E7%BD%AEtomcat%E7%89%88%E6%9C%AC/"/>
    <id>https://z201.github.io/2020/07/23/%E5%AE%9E%E8%B7%B5-spring-boot%E6%9B%BF%E6%8D%A2%E5%86%85%E7%BD%AEtomcat%E7%89%88%E6%9C%AC/</id>
    <published>2020-07-23T09:03:27.000Z</published>
    <updated>2020-07-23T09:35:21.482Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本章只是回顾一次eureka版本升级后tomcat资源占用过高的问题，临时解决。</p></blockquote><h3 id="升级springBoot、SpringCloud版本"><a href="#升级springBoot、SpringCloud版本" class="headerlink" title="升级springBoot、SpringCloud版本"></a>升级springBoot、SpringCloud版本</h3><ul><li>升级完成后直接在测试环境测试部署，结果发现eureka的cpu资源占用过高，导致假死。通过arthas发现是tomcat线程阻塞。通过dependepency看了下springboot中内嵌tomcat的版本是9了。之前是8，测试环境一大堆人等着测试接口。首先想着降低tomcat版本。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看依赖</span><br><span class="line">gradle dependencies</span><br><span class="line">mvn dependency:tree &gt; output.txt   # 输出到文件里</span><br></pre></td></tr></table></figure><h3 id="排除SpringBoot的Tomcat，指定Tomcat版本"><a href="#排除SpringBoot的Tomcat，指定Tomcat版本" class="headerlink" title="排除SpringBoot的Tomcat，指定Tomcat版本"></a>排除SpringBoot的Tomcat，指定Tomcat版本</h3><p>有时候我们需要在特定情况下使用特定的Tomcat版本，这时候总不能因为Tomcat就改变SpringBoot的版本，所以可以采用排除SpringBoot中的Tomcat包，然后手动指定Tomcat的版本，当然还要引入Tomcat相关的包。</p><h5 id="Gradle的配置"><a href="#Gradle的配置" class="headerlink" title="Gradle的配置"></a>Gradle的配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>) &#123;</span><br><span class="line">  exclude <span class="keyword">module</span>: <span class="string">"spring-boot-starter-tomcat"</span></span><br><span class="line">&#125;</span><br><span class="line">compile <span class="string">'org.apache.tomcat.embed:tomcat-embed-core:8.5.37'</span></span><br><span class="line">compile <span class="string">'org.apache.tomcat.embed:tomcat-embed-el:8.5.37'</span></span><br><span class="line">compile <span class="string">'org.apache.tomcat.embed:tomcat-embed-logging-juli:8.5.2'</span></span><br><span class="line">compile <span class="string">'org.apache.tomcat.embed:tomcat-embed-websocket:8.5.37'</span></span><br></pre></td></tr></table></figure><p>如果不指定版本，则会使用最新的Tomcat版本, 否则直接指定对应的版本号。</p><h5 id="Maven的配置"><a href="#Maven的配置" class="headerlink" title="Maven的配置"></a>Maven的配置</h5><ol><li>在 pom.xml文件里面添加一个标签<properties>，添加期望的版本。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tomcat.version</span>&gt;</span>8.5.37<span class="tag">&lt;/<span class="name">tomcat.version</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>添加必要的Jar包：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-juli<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;tomcat.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-logging-juli<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;tomcat.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重新部署eureka后一切正常。处理时间短暂，没有影响大家工作。时间过了大半年了，也忘记具体是啥原因了。有机会本地复现试试。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本章只是回顾一次eureka版本升级后tomcat资源占用过高的问题，临时解决。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;升级springBoot、SpringCloud版本&quot;&gt;&lt;a href=&quot;#升级springBoot、Spring
      
    
    </summary>
    
    
      <category term="实践" scheme="https://z201.github.io/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="Eureka" scheme="https://z201.github.io/tags/Eureka/"/>
    
      <category term="Tomcat" scheme="https://z201.github.io/tags/Tomcat/"/>
    
      <category term="SpringBoot" scheme="https://z201.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>实践-eureka钉钉告警通知</title>
    <link href="https://z201.github.io/2020/07/16/%E5%AE%9E%E8%B7%B5-eureka%E9%92%89%E9%92%89%E5%91%8A%E8%AD%A6%E9%80%9A%E7%9F%A5/"/>
    <id>https://z201.github.io/2020/07/16/%E5%AE%9E%E8%B7%B5-eureka%E9%92%89%E9%92%89%E5%91%8A%E8%AD%A6%E9%80%9A%E7%9F%A5/</id>
    <published>2020-07-16T09:04:36.000Z</published>
    <updated>2020-08-26T14:24:02.063Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇幅只是回顾使用eureka的时候如何钉钉告警。</p></blockquote><h3 id="eureka如何快速实现钉钉告警"><a href="#eureka如何快速实现钉钉告警" class="headerlink" title="eureka如何快速实现钉钉告警"></a>eureka如何快速实现钉钉告警</h3><p><a href="https://z201.cn/2020/07/15/%E5%AE%9E%E8%B7%B5-spring-boot%E5%BC%82%E5%B8%B8%E9%92%89%E9%92%89%E9%80%9A%E7%9F%A5/" target="_blank" rel="noopener">实践-spring-boot异常钉钉通知</a></p><p>​        上面实践了springboot全局异常钉钉告警机制。这篇主要回顾eureka监听机制钉钉告警。在日常维护工作中，如果出现网络抖动或者其它问题导致应用不可用，需要第一件发出告警提醒相关人员尽快处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">eureka -&gt;&gt; eventListener : event</span><br><span class="line">eventListener -&gt;&gt;  钉钉 : alarmNoticeSend</span><br><span class="line">钉钉 -&gt;&gt; 开发人员  : eurekaInstanceInfo</span><br></pre></td></tr></table></figure><ul><li>实例图</li></ul><p><img src="https://z201.oss-cn-shanghai.aliyuncs.com/JavaNote/eureka%E5%AE%9E%E4%BE%8B%E9%92%89%E9%92%89%E5%91%8A%E8%AD%A6.png"></p><p>​        关键代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(EurekaInstanceCanceledEvent event)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">"告警通知 [&#123;&#125;] 服务注销 timestamp [&#123;&#125;] serverId [&#123;&#125;]"</span>,</span><br><span class="line">                event.getAppName(),</span><br><span class="line">                event.getTimestamp(),</span><br><span class="line">                event.getServerId());</span><br><span class="line">        <span class="keyword">if</span> (!event.isReplication()) &#123;</span><br><span class="line">            ServiceNotice serviceNotice = <span class="keyword">new</span> ServiceNotice();</span><br><span class="line">            serviceNotice.setTitle(<span class="string">"告警通知 服务下线"</span>);</span><br><span class="line">            serviceNotice.setAppName(event.getAppName());</span><br><span class="line">            serviceNotice.setTimestamp(event.getTimestamp());</span><br><span class="line">            serviceNotice.setServerId(event.getServerId());</span><br><span class="line">            serviceNotice.setProfiles(active);</span><br><span class="line">            alarmNoticeManage.createNotice(serviceNotice, <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(EurekaInstanceRegisteredEvent event)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"告警通知 [&#123;&#125;] 服务注册 timestamp [&#123;&#125;] id [&#123;&#125;] ipAddr [&#123;&#125;] "</span>,</span><br><span class="line">                event.getInstanceInfo().getAppName(),</span><br><span class="line">                event.getTimestamp(),</span><br><span class="line">                event.getInstanceInfo().getId(),</span><br><span class="line">                event.getInstanceInfo().getIPAddr()</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (!event.isReplication()) &#123;</span><br><span class="line">            ServiceNotice serviceNotice = <span class="keyword">new</span> ServiceNotice();</span><br><span class="line">            serviceNotice.setTitle(<span class="string">"告警通知 服务上线"</span>);</span><br><span class="line">            serviceNotice.setAppName(event.getInstanceInfo().getAppName());</span><br><span class="line">            serviceNotice.setTimestamp(event.getTimestamp());</span><br><span class="line">            serviceNotice.setServerId(event.getInstanceInfo().getId());</span><br><span class="line">            serviceNotice.setProfiles(active);</span><br><span class="line">            alarmNoticeManage.createNotice(serviceNotice, <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>效果如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">告警通知 服务下线</span><br><span class="line">2020-07-16 16:03:20 Z-GATEWAY 192.168.31.7:z-gateway:9000 profiles dev1</span><br><span class="line">@xxx</span><br></pre></td></tr></table></figure><ul><li>eureka查看源码得知有五个事件。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EurekaServerStartedEvent - Eureka服务端启动事件</span><br><span class="line">EurekaRegistryAvailableEvent - Eureka服务端可用事件</span><br><span class="line">EurekaInstanceRegisteredEvent - Eureka客户端服务注册事件</span><br><span class="line">EurekaInstanceRenewedEvent - Eureka客户端续约事件</span><br><span class="line">EurekaInstanceCanceledEvent - Eureka客户端下线事件</span><br></pre></td></tr></table></figure><p>这里就比较简单了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇幅只是回顾使用eureka的时候如何钉钉告警。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;eureka如何快速实现钉钉告警&quot;&gt;&lt;a href=&quot;#eureka如何快速实现钉钉告警&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="实践" scheme="https://z201.github.io/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="Java" scheme="https://z201.github.io/tags/Java/"/>
    
      <category term="微服务" scheme="https://z201.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Eureka" scheme="https://z201.github.io/tags/Eureka/"/>
    
      <category term="钉钉" scheme="https://z201.github.io/tags/%E9%92%89%E9%92%89/"/>
    
  </entry>
  
  <entry>
    <title>实践-SpringBoot异常钉钉通知</title>
    <link href="https://z201.github.io/2020/07/15/%E5%AE%9E%E8%B7%B5-spring-boot%E5%BC%82%E5%B8%B8%E9%92%89%E9%92%89%E9%80%9A%E7%9F%A5/"/>
    <id>https://z201.github.io/2020/07/15/%E5%AE%9E%E8%B7%B5-spring-boot%E5%BC%82%E5%B8%B8%E9%92%89%E9%92%89%E9%80%9A%E7%9F%A5/</id>
    <published>2020-07-15T07:23:20.000Z</published>
    <updated>2020-08-15T01:20:15.232Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇幅只是回顾使用钉钉做异常告警需要那些关键业务信息。</p></blockquote><h3 id="为什么要做钉钉通知？"><a href="#为什么要做钉钉通知？" class="headerlink" title="为什么要做钉钉通知？"></a>为什么要做钉钉通知？</h3><p>​        事情要从我入职上家公司说起，进入公司后把线上项目clone下来大致看了下。代码风格过于滞后、编码风格混乱。进入公司第一周就出现了线上故障，嗯。我去线上检查日志，emmmm竟然没有日志输出。这次故障是由客户反馈来的。当时我非常吃惊，大伙好像很淡定的样子，习以为常了？</p><p>​        想到当初面试的时候和总监的谈话，主要是带领团队落地微服务架构，看来必须大刀阔斧了。</p><p>​        首先想到的时候改进日志输出、定义全局异常级别，根据异常级别输出日志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">Java应用 -&gt;&gt; SpringAop全局异常拦截 : runtimeException</span><br><span class="line">SpringAop全局异常拦截 -&gt;&gt;  钉钉 : alarmNoticeSend</span><br><span class="line">钉钉 -&gt;&gt; 开发人员  : exceptionInfo</span><br></pre></td></tr></table></figure><ul><li>效果图</li></ul><p><img src="https://z201.oss-cn-shanghai.aliyuncs.com/JavaNote/springboot%E9%92%89%E9%92%89%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E6%8B%A6%E6%88%AA.png"></p><p>​        我们需要从钉钉里面看到那些异常信息呢？这是当时输出到钉钉的信息。通过编写全局拦截器，在公共基础项目里面添加了aop全局拦截。刚开始上线的时候钉钉一天动不动就几千个异常告警。刚开始大伙都很紧张，过了个把月大伙已经又麻木了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">告警信息</span><br><span class="line">工程名：z201-gateway</span><br><span class="line">类路径：cn.z201.cloud.gateway.VlinkFrameworkGatewayApplicationTest</span><br><span class="line">方法名：alarm</span><br><span class="line">异常信息：java.lang.IllegalAccessException</span><br><span class="line">异常追踪：</span><br><span class="line">cn.z201.cloud.gateway.VlinkFrameworkGatewayApplicationTest.alarm(VlinkFrameworkGatewayApplicationTest.java:<span class="number">64</span>)</span><br><span class="line">sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">org.junit.runners.model.FrameworkMethod$<span class="number">1</span>.runReflectiveCall(FrameworkMethod.java:<span class="number">50</span>)</span><br><span class="line">org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:<span class="number">12</span>)</span><br><span class="line">org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:<span class="number">47</span>)</span><br><span class="line">org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:<span class="number">17</span>)</span><br><span class="line">org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:<span class="number">74</span>)</span><br></pre></td></tr></table></figure><h3 id="这样的告警信息就够了吗？"><a href="#这样的告警信息就够了吗？" class="headerlink" title="这样的告警信息就够了吗？"></a>这样的告警信息就够了吗？</h3><p>​        明显这样是不够够的，前端有安卓、ios、微信小程序、web、快应用。太多前端项目了，后端需要识别出是哪里的项目出的问题。于是又改进了一次。邀请前端开发人员在HttpHeader里面增加额外参数。为了做流量区分也增加了一些参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  <span class="string">"Content-Type"</span>:<span class="string">"application/json"</span> </span><br><span class="line">  "Authorization":"Bearer xxxxxxxxxx"  ## jwt</span><br><span class="line">  "Client-Business-Group-Source": "1", ##  业务组来源唯一标号</span><br><span class="line">  "Client-Business-Source": "1000", ## 业务来源唯一标号</span><br><span class="line">  "Client-Business-Activity-Source": "1", ## 查看介绍、更多 针对特殊业务流量识别</span><br><span class="line">  "Client-Env-Source": "1", ##客户端环境来源  1 ios  2 android  3 windows</span><br><span class="line">  "Client-Platform-Source": "xxx", ##客户端平台 xxx手机型号、浏览器</span><br><span class="line">  "Client-Start-Time": "1",        ##请求时间戳</span><br><span class="line">  "Client-Version-Source": "1.0.0" ##客户端版本号</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        通过上面的改进告警信息完善很多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">告警信息</span><br><span class="line">工程名：z201-gateway</span><br><span class="line">类路径：cn.z201.cloud.gateway.VlinkFrameworkGatewayApplicationTest</span><br><span class="line">方法名：alarm</span><br><span class="line">异常信息：java.lang.IllegalAccessException</span><br><span class="line">异常扩展信息： &#123;</span><br><span class="line">  &quot;Client-Business-Source&quot;: &quot;1000&quot;, </span><br><span class="line">  &quot;Client-Business-Activity-Source&quot;: &quot;1&quot;, </span><br><span class="line">  &quot;Client-Env-Source&quot;: &quot;1&quot;, </span><br><span class="line">  &quot;Client-Platform-Source&quot;: &quot;xxx&quot;,   </span><br><span class="line">  &quot;Client-Version-Source&quot;: &quot;1.0.0&quot; </span><br><span class="line">&#125; </span><br><span class="line">异常追踪：</span><br><span class="line">cn.z201.cloud.gateway.VlinkFrameworkGatewayApplicationTest.alarm(VlinkFrameworkGatewayApplicationTest.java:64)</span><br><span class="line">sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)</span><br><span class="line">org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</span><br><span class="line">org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)</span><br><span class="line">org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</span><br><span class="line">org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:74)</span><br></pre></td></tr></table></figure><h3 id="分布式下面临的问题！"><a href="#分布式下面临的问题！" class="headerlink" title="分布式下面临的问题！"></a>分布式下面临的问题！</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">gateway -&gt;&gt; 应用A : httpRequest</span><br><span class="line">应用A -&gt;&gt;  应用B : httpRequest</span><br><span class="line">应用B --&gt;&gt; 应用A : httpResponse</span><br><span class="line">应用A --&gt;&gt; gateway : httpResponse</span><br></pre></td></tr></table></figure><p><img src="https://z201.oss-cn-shanghai.aliyuncs.com/JavaNote/%E5%A4%9A%E5%BA%94%E7%94%A8%E9%93%BE%E8%B7%AF%E8%AF%B7%E6%B1%82.png"></p><p>​        当调用链多的时候定位问题就有点麻烦，比如应用a调用应用b。应用b执行了异常信息直接抛出了告警信息。但是spring cloud http rpc默认是不会吧请求参数传递到后面的服务中，需要我们做下简单的扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> z201.coding@gmail.com</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpApiConstant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String X_REAL_IP = <span class="string">"x-real-ip"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求头跟踪id名。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String HTTP_HEADER_TRACE_ID = <span class="string">"AppTraceId"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String HTTP_TOKEN_HEADER = <span class="string">"Authorization"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * app租户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String APP_TENANT = <span class="string">"Tenant"</span>;</span><br><span class="line"></span><br><span class="line">    String CLIENT_BUSINESS_GROUP_SOURCE = <span class="string">"Client-Business-Group-Source"</span>;</span><br><span class="line"></span><br><span class="line">    String CLIENT_BUSINESS_SOURCE = <span class="string">"Client-Business-Source"</span>;</span><br><span class="line"></span><br><span class="line">    String CLIENT_BUSINESS_ACTIVITY_SOURCE = <span class="string">"Client-Business-Activity-Source"</span>;</span><br><span class="line"></span><br><span class="line">    String CLIENT_EVN_SOURCE = <span class="string">"Client-Env-Source"</span>;</span><br><span class="line"></span><br><span class="line">    String CLIENT_PLATFORM_SOURCE = <span class="string">"Client-Platform-Source"</span>;</span><br><span class="line"></span><br><span class="line">    String CLIENT_START_TIME = <span class="string">"Client-Start-Time"</span>;</span><br><span class="line"></span><br><span class="line">    String CLIENT_VERSION_SOURCE = <span class="string">"Client-Version-Source"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> z201.coding@gmail.com</span></span><br><span class="line"><span class="comment"> * 自定义restTemplate拦截器</span></span><br><span class="line"><span class="comment"> * 这里可以把一些参数从应用层传到内部服务</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(WebMvcConfigurer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MdcFeignInterceptorConfig</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span>, <span class="title">HttpApiConstant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MdcFeignInterceptorConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Loaded Z-REST-INTERCEPTOR [V1.0.0]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate template)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes())</span><br><span class="line">                    .getRequest();</span><br><span class="line">            String xRealIp = request.getHeader(X_REAL_IP);</span><br><span class="line">            String authentication = request.getHeader(HTTP_TOKEN_HEADER);</span><br><span class="line">            String appTraceId = request.getHeader(HTTP_HEADER_TRACE_ID);</span><br><span class="line">            String businessGroupSource = request.getHeader(CLIENT_BUSINESS_GROUP_SOURCE);</span><br><span class="line">            String clientBusinessSource = request.getHeader(CLIENT_BUSINESS_SOURCE);</span><br><span class="line">            String clientBusinessActivitySource = request.getHeader(CLIENT_BUSINESS_ACTIVITY_SOURCE);</span><br><span class="line">            String clientEnvSource = request.getHeader(CLIENT_EVN_SOURCE);</span><br><span class="line">            String clientPlatformSource = request.getHeader(CLIENT_PLATFORM_SOURCE);</span><br><span class="line">            String clientStartTime = request.getHeader(CLIENT_START_TIME);</span><br><span class="line">            String clientVersionSource = request.getHeader(CLIENT_VERSION_SOURCE);</span><br><span class="line">            template.header(HttpHeaders.ACCEPT_ENCODING, <span class="string">"gzip"</span>);</span><br><span class="line">            template.header(X_REAL_IP, xRealIp);</span><br><span class="line">            template.header(HTTP_TOKEN_HEADER, authentication);</span><br><span class="line">            template.header(CLIENT_BUSINESS_GROUP_SOURCE, businessGroupSource);</span><br><span class="line">            template.header(CLIENT_BUSINESS_SOURCE, clientBusinessSource);</span><br><span class="line">            template.header(CLIENT_BUSINESS_ACTIVITY_SOURCE, clientBusinessActivitySource);</span><br><span class="line">            template.header(CLIENT_EVN_SOURCE, clientEnvSource);</span><br><span class="line">            template.header(CLIENT_PLATFORM_SOURCE, clientPlatformSource);</span><br><span class="line">            template.header(CLIENT_START_TIME, clientStartTime);</span><br><span class="line">            template.header(CLIENT_VERSION_SOURCE, clientVersionSource);</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">                <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">                    String name = headerNames.nextElement();</span><br><span class="line">                    String value = request.getHeader(name);</span><br><span class="line">                    log.debug(<span class="string">"header &#123;&#125; - &#123;&#125;"</span>, name, value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"template exception &#123;&#125;"</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的异常钉钉告警就到这里结束了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇幅只是回顾使用钉钉做异常告警需要那些关键业务信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;为什么要做钉钉通知？&quot;&gt;&lt;a href=&quot;#为什么要做钉钉通知？&quot; class=&quot;headerlink&quot; title=&quot;为什么要做钉钉通知？
      
    
    </summary>
    
    
      <category term="实践" scheme="https://z201.github.io/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="Java" scheme="https://z201.github.io/tags/Java/"/>
    
      <category term="微服务" scheme="https://z201.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring" scheme="https://z201.github.io/tags/Spring/"/>
    
      <category term="钉钉" scheme="https://z201.github.io/tags/%E9%92%89%E9%92%89/"/>
    
  </entry>
  
  <entry>
    <title>面试题-交换两个变量的值</title>
    <link href="https://z201.github.io/2020/07/12/%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/"/>
    <id>https://z201.github.io/2020/07/12/%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/</id>
    <published>2020-07-12T00:02:14.000Z</published>
    <updated>2020-08-12T00:10:29.339Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>刚去杭州面试的第二家公司，做笔试的时候的时候遇到的。最近几天在整理以前的笔记发现了。简单记录下。</p></blockquote><h3 id="互换两个变量的值"><a href="#互换两个变量的值" class="headerlink" title="互换两个变量的值"></a>互换两个变量的值</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">12</span>;</span><br><span class="line"><span class="comment">// 通过两个变量之间的运算输出结果 a = 12 b = 10</span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swapTest1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">12</span>;</span><br><span class="line">a=a^b; <span class="comment">//a=1010^b=1100;</span></span><br><span class="line">b=a^b; <span class="comment">//a=0110^b=1100;</span></span><br><span class="line">a=a^b; <span class="comment">//a=0110^b=1010;</span></span><br><span class="line"><span class="comment">//a=1100=12;b=1010;</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swapTest2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">12</span>;</span><br><span class="line">a = a + b; <span class="comment">// 22 = 10 + 12</span></span><br><span class="line">b = a - b; <span class="comment">// 10 = 22 - 12</span></span><br><span class="line">a = a - b; <span class="comment">// 12 = 22 - 10</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;刚去杭州面试的第二家公司，做笔试的时候的时候遇到的。最近几天在整理以前的笔记发现了。简单记录下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;互换两个变量的值&quot;&gt;&lt;a href=&quot;#互换两个变量的值&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="面试" scheme="https://z201.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Java" scheme="https://z201.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Redis-cli使用</title>
    <link href="https://z201.github.io/2019/12/15/Redis-cli%E4%BD%BF%E7%94%A8/"/>
    <id>https://z201.github.io/2019/12/15/Redis-cli%E4%BD%BF%E7%94%A8/</id>
    <published>2019-12-15T08:56:48.000Z</published>
    <updated>2020-12-02T08:14:32.579Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在mac中使用redis-cli。相比rdm我可能更喜欢这个命令行工具。</p></blockquote><h3 id="在mac中之安装redis-cli"><a href="#在mac中之安装redis-cli" class="headerlink" title="在mac中之安装redis-cli"></a>在mac中之安装redis-cli</h3><blockquote><p>按照标准的按照流程，需要先安装redis-server。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew tap ringohub/redis-cli</span><br><span class="line"></span><br><span class="line">brew update &amp;&amp; brew doctor</span><br><span class="line"></span><br><span class="line">brew install redis-cli</span><br></pre></td></tr></table></figure><ul><li>相关文档<a href="https://stackoverflow.com/questions/39704273/macos-x-is-there-a-way-to-install-only-redis-cli" target="_blank" rel="noopener">https://stackoverflow.com/questions/39704273/macos-x-is-there-a-way-to-install-only-redis-cli</a></li></ul><h3 id="根据redis常用命令来学习使用redis-cli。"><a href="#根据redis常用命令来学习使用redis-cli。" class="headerlink" title="根据redis常用命令来学习使用redis-cli。"></a>根据redis常用命令来学习使用redis-cli。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在mac中使用redis-cli。相比rdm我可能更喜欢这个命令行工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;在mac中之安装redis-cli&quot;&gt;&lt;a href=&quot;#在mac中之安装redis-cli&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="Redis" scheme="https://z201.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://z201.github.io/tags/Redis/"/>
    
      <category term="Redis-cli" scheme="https://z201.github.io/tags/Redis-cli/"/>
    
  </entry>
  
</feed>
